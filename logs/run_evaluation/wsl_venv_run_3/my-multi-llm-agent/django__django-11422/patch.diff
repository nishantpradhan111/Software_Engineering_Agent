```diff
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -114,13 +114,13 @@ def iter_modules_and_files(modules, extra_files):
         # During debugging (with PyDev) the 'typing.io' and 'typing.re' objects
         # are added to sys.modules, however they are types not modules and so
         # cause issues here.
-        if not isinstance(module, ModuleType) or getattr(module, '__spec__', None) is None:
+        if not isinstance(module, ModuleType):
+            continue
+        if module.__name__ == '__main__':
+            # __main__ (usually manage.py) doesn't always have a __spec__ set.
+            # Handle this by falling back to using __file__, resolved below.
+            # See https://docs.python.org/reference/import.html#main-spec
+            if hasattr(module, '__file__'):
+                sys_file_paths.append(module.__file__)
             continue
         if getattr(module, '__spec__', None) is None:
             continue
@@ -130,3 +130,16 @@
             continue
         sys_file_paths.append(spec.origin)
     return frozenset(sys_file_paths).union(extra_files)
--- a/tests/utils_tests/test_autoreload.py
+++ b/tests/utils_tests/test_autoreload.py
@@ -127,6 +127,11 @@
         del module.__spec__
         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())
 
+    def test_main_module_is_resolved(self):
+        main_module = sys.modules['__main__']
+        files = autoreload.iter_modules_and_files((main_module,), frozenset())
+        self.assertIn(main_module.__file__, files)
+
+
 class TestCommonRoots(SimpleTestCase):
     def test_common_roots(self):
```