```diff
--- a/models.py
+++ b/models.py
@@ -5,6 +5,11 @@
  class Meta:
 	 abstract = True
 class B(A):
- foo_choice = [("A","output1"),("B","output2"),("C","output3")]
+    foo_choice = A.foo_choice + [("C","output3")]
  field_foo = models.CharField(max_length=254,choices=foo_choice)
+
+
+# Example usage (in a shell or similar):
+# from your_app.models import B
+# b = B.objects.create(field_foo='C')
+# print(b.get_field_foo_display())  # Output: output3

```

**Explanation of the fix:**

The problem arises because when you redefine `foo_choice` in the child class `B`, you're completely overriding the choices from the parent class `A`.  The `get_FOO_display()` method relies on the `choices` attribute of the field to map the stored value to its display value.

The solution is to *extend* the parent's choices instead of replacing them.  This is done by:

```python
foo_choice = A.foo_choice + [("C","output3")] 
```

This line takes the existing choices from `A` and appends the new choice `("C", "output3")` to it, ensuring that the complete list of choices is available to the `get_field_foo_display()` method.


**Important Considerations for Larger Projects:**

* **Duplication:** If you have many child models inheriting from `A` and potentially adding their own choices, you might want to consider a more centralized way of managing these choices (e.g., a separate module or a custom field type) to avoid duplication and potential inconsistencies.
* **Database Migrations:**  If you have existing data in the database, you might need to create a data migration to update any existing instances of model `B` so that their `field_foo` values are consistent with the new choices. This is especially important if you have previously saved instances with the value 'C', as they might not display correctly without a migration.  You can generate a migration using `python manage.py makemigrations your_app`.


This revised patch not only fixes the immediate issue but also provides better maintainability and avoids potential problems down the line.