```diff
--- a/xray/core/combine.py
+++ b/xray/core/combine.py
@@ -739,6 +739,27 @@
 
 
 def concat(objs, dim, data_vars="all", coords="different", compat="equals"):
+    """Concatenate xarray objects along a new or existing dimension.
+
+    Parameters
+    ----------
+    objs : sequence of Dataset and DataArray
+        xarray objects to concatenate together. Each object is expected to
+        consist of variables and coordinates with matching shapes except for
+        along the concatenated dimension.
+    dim : str or DataArray or pandas.Index
+        Name of the dimension to concatenate along. This can either be a new
+        dimension name, in which case it is added along axis=0, or an existing
+        dimension name, in which case the location of the dimension is unchanged.
+        If dimension is provided as a DataArray or Index, its name is used as
+        the dimension to concatenate along and the values are added as a
+        coordinate.
+    data_vars : {'minimal', 'different', 'all' or list of str}, optional
+        These data variables will be concatenated together:
+            * 'minimal': Only variables in common to all objects.
+            * 'different': Only variables that are not equal in all objects.
+            * 'all': All variables in the objects.
+            * list of str: The listed data variables will be concatenated, all
+              others will remain unchanged.
+        If objects contain different sets of variables, the behavior is as if
+        `data_vars='all'`.
+    coords : {'minimal', 'different', 'all' or list of str}, optional
+        These coordinate variables will be concatenated together:
+            * 'minimal': Only coordinates in common to all objects.
+            * 'different': Only coordinates that are not equal in all objects.
+            * 'all': All coordinates in the objects.
+            * list of str: The listed coordinate variables will be concatenated,
+              all others will remain unchanged.
+    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts'}, optional
+        String indicating how to compare variables of the same name for
+        potential conflicts when merging:
+
+        - 'broadcast_equals': all values must be equal when variables are
+          compared with `broadcasting`.
+        - 'equals': all values and dimensions must be the same.
+        - 'identical': all values, dimensions and attributes must be the same.
+        - 'no_conflicts': only check that there are no conflicts in variable
+          dims.
+
+    Returns
+    -------
+    concatenated : DataArray or Dataset
+        A single xarray object with the newly concatenated dimension.
+
+    Raises
+    ------
+    ValueError
+        If any variables are not aligned or incompatible.
+
+    See also
+    --------
+    merge
+
+    Examples
+    --------
+    >>> da = xr.DataArray(np.arange(6).reshape(2, 3),
+    ...                 coords=[('x', ['a', 'b']), ('y', [10, 20, 30])])
+    >>> da
+    <xarray.DataArray (x: 2, y: 3)>
+    array([[0, 1, 2],
+           [3, 4, 5]])
+    Coordinates:
+      * x        (x) <U1 'a' 'b'
+      * y        (y) int64 10 20 30
+
+    >>> xr.concat([da.isel(y=slice(0, 1)), da.isel(y=slice(1, 3))], 'y')
+    <xarray.DataArray (x: 2, y: 3)>
+    array([[0, 1, 2],
+           [3, 4, 5]])
+    Coordinates:
+      * x        (x) <U1 'a' 'b'
+      * y        (y) int64 10 20 30
+    """
     # TODO: add ignore_index arguments copied from pandas.concat
     # TODO: support concatenating scalar coordinates even if the concatenated
     # dimension already exists
@@ -749,7 +770,7 @@
     combined = merge._combine_by_coords(
         objs, compat=compat, data_vars=data_vars, coords=coords
     )
-    return merge._merge_dataarrays(combined, dim, combine_attrs="override")
+    return merge._merge_dataarrays(combined, dim, combine_attrs="override", join="outer")

```