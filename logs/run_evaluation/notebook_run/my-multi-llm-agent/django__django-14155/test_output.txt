/eval.sh: line 2: set: pipefail: invalid option name
+ source $'/opt/miniconda3/bin/activate\r'
/eval.sh: line 3: /opt/miniconda3/bin/activate: No such file or directory
+ conda activate $'testbed\r'

CondaError: Run 'conda init' before 'conda activate'

+ cd $'/testbed\r'
/eval.sh: line 5: cd: $'/testbed\r': No such file or directory
+ git config --global --add safe.directory $'/testbed\r'
+ cd $'/testbed\r'
/eval.sh: line 7: cd: $'/testbed\r': No such file or directory
+ git $'status\r'
git: 'status' is not a git command. See 'git --help'.

The most similar command is
	status
+ git $'show\r'
git: 'show' is not a git command. See 'git --help'.

The most similar command is
	show
+ git -c core.fileMode=false diff $'2f13c476abe4ba787b6cb71131818341911f43cc\r'
fatal: ambiguous argument '2f13c476abe4ba787b6cb71131818341911f43cc?': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
+ source $'/opt/miniconda3/bin/activate\r'
/eval.sh: line 11: /opt/miniconda3/bin/activate: No such file or directory
+ conda activate $'testbed\r'

CondaError: Run 'conda init' before 'conda activate'

+ python -m pip install -e $'.\r'
ERROR: . is not a valid editable requirement. It should either be a path to a local project or a VCS URL (beginning with bzr+http, bzr+https, bzr+ssh, bzr+sftp, bzr+ftp, bzr+lp, bzr+file, git+http, git+https, git+ssh, git+git, git+file, hg+file, hg+http, hg+https, hg+ssh, hg+static-http, svn+ssh, svn+http, svn+https, svn+svn, svn+file).
+ git checkout 2f13c476abe4ba787b6cb71131818341911f43cc $'tests/urlpatterns_reverse/tests.py\r'
error: pathspec 'tests/urlpatterns_reverse/tests.py?' did not match any file(s) known to git
+ git apply -v -
Checking patch tests/urlpatterns_reverse/tests.py...
error: while searching for:
        self.assertEqual(?
            repr(resolve('/no_kwargs/42/37/')),?
            "ResolverMatch(func=urlpatterns_reverse.views.empty_view, "?
            "args=('42', '37'), kwargs={}, url_name=no-kwargs, app_names=[], "?
            "namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)",?
        )?
?
?
@override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')?
class ErroneousViewTests(SimpleTestCase):?

error: patch failed: tests/urlpatterns_reverse/tests.py:1141
error: tests/urlpatterns_reverse/tests.py: patch does not apply
+ : '>>>>> Start Test Output'
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 $'urlpatterns_reverse.tests\r'
Traceback (most recent call last):
  File "/testbed/./tests/runtests.py", line 14, in <module>
    import django
ModuleNotFoundError: No module named 'django'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/testbed/./tests/runtests.py", line 16, in <module>
    raise RuntimeError(
RuntimeError: Django module not found, reference tests/README.rst for instructions.
+ : '>>>>> End Test Output'
+ git checkout 2f13c476abe4ba787b6cb71131818341911f43cc $'tests/urlpatterns_reverse/tests.py\r'
error: pathspec 'tests/urlpatterns_reverse/tests.py?' did not match any file(s) known to git
