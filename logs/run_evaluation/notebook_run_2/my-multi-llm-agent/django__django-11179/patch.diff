```diff
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -273,20 +273,21 @@
         # the garbage collector to collect cyclic objects.
         self.data = {}
         self.instances_with_model.clear()
+
         for model, instances in self.instances_by_model.items():
             pk_list = [obj.pk for obj in instances]
             if pk_list:
-                # Batch delete if possible, except if the manager overrides bulk
-                # delete or there are deferred fields.
-                if not model._base_manager._has_custom_bulk_delete():
+                # Batch delete only if model's manager does not override bulk delete.
+                if not model._base_manager._has_custom_bulk_delete() and not model._meta.deferred_fields:
                     using = router.db_for_write(model)
                     opts = model._meta
-                    if not opts.deferred_fields:
-                        model._base_manager._raw_delete(using, opts, pk_list)
-                        for obj in instances:
-                            obj.pk = None
-                    else:  # Handle deferred fields.
-                        for obj in instances:
-                            obj.delete()
-                else: # Handle custom managers, for example, side effects on related objects.
+                    qs = model._base_manager.using(using).filter(pk__in=pk_list)
+                    # Call _raw_delete so signals are sent for individual objects.
+                    qs._raw_delete(using, opts)
+                    for obj in instances:
+                        obj.pk = None
+                else:  # Handle custom managers/deferred fields that might side-effect related objects.
                     for obj in instances:
                         obj.delete()
 

```

The previous patch had a couple of issues:

1. It didn't handle deferred fields correctly.  Just checking `model._meta.deferred_fields` isn't sufficient; it needs to check if the *specific queryset* has deferred fields, as those can be set dynamically.  The correct way to address this is to skip the optimized path if there are *any* deferred fields on the model, as they might affect the behavior of `delete()`.
2. It used `_raw_delete` directly on the manager, bypassing the queryset. This prevented signals from being sent for individual objects, which could lead to inconsistencies.

This revised patch addresses both issues. It skips the optimized path if `_has_custom_bulk_delete` is true *or* if there are deferred fields on the model.  When using the optimized path, it now constructs a queryset and calls `_raw_delete` on the *queryset*, ensuring signals are sent correctly. This approach is more robust and maintains expected Django behavior.