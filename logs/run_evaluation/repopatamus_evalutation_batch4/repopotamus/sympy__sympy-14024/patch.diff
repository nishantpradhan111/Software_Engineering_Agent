```diff
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1678,11 +1678,7 @@
                 if (ne is S.One):
                     return Rational(self.q, self.p)
                 if self.is_negative:
-                    if expt.q != 1:
-                        return -(S.NegativeOne)**((expt.p % expt.q) /\
-                               S(expt.q))*Rational(self.q, -self.p)**ne
-                    else:
-                        return S.NegativeOne**ne*Rational(self.q, -self.p)**ne
+                    return S.NegativeOne**expt*Rational(self.q, -self.p)**ne
                 else:
                     return Rational(self.q, self.p)**ne
             if expt is S.Infinity:  # -oo already caught by test for negative
@@ -1690,11 +1686,7 @@
                     return S.Zero
             return self**Rational(1, 2)**expt  # handle symbolic exponents
 
-        if expt.q != 1:
-            return -(S.NegativeOne)**((expt.p % expt.q) /
-                   S(expt.q))*Rational(self.q, -self.p)**ne
-        else:
-            return S.NegativeOne**ne*Rational(self.q, -self.p)**ne
+        return S.NegativeOne**expt*Rational(self.q, -self.p)**ne
     else:
         return Rational(self.q, self.p)**ne
 if expt is S.Infinity:  # -oo already caught by test for negative
@@ -2223,11 +2215,7 @@
             # invert base and change sign on exponent
             ne = -expt
             if self.is_negative:
-                if expt.q != 1:
-                    return -(S.NegativeOne)**((expt.p % expt.q) /\
-                            S(expt.q))*Rational(1, -self)**ne
-                else:
-                    return (S.NegativeOne)**ne*Rational(1, -self)**ne
+                return S.NegativeOne**expt*Rational(1, -self)**ne
             else:
                 return Rational(1, self.p)**ne
         # see if base is a perfect root, sqrt(4) --> 2

```