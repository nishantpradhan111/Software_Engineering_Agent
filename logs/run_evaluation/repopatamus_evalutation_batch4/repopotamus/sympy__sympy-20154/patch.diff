```diff
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -1738,7 +1738,7 @@
 
 def partitions(n, m=None, k=None, size=False):
     """Generate all partitions of positive integer, n.
-
+    
 
     Parameters
     ==========
@@ -1754,7 +1754,7 @@
     Each partition is represented as a dictionary, mapping an integer
     to the number of copies of that integer in the partition.  For example,
     the first partition of 4 returned is {4: 1}, "4: one of them".
-
+    
 
     Examples
     ========
@@ -1762,12 +1762,12 @@
     >>> from sympy.utilities.iterables import partitions
 
     The numbers appearing in the partition (the key of the returned dict)
-    are limited with k:
+    are limited with k: 
 
     >>> for p in partitions(6, k=2):  # doctest: +SKIP
     ...     print(p)
-    {2: 3}
-    {1: 2, 2: 2}
+    {2: 3} 
+    {1: 2, 2: 2} 
     {1: 4, 2: 1}
     {1: 6}
 
@@ -1775,12 +1775,12 @@
     The maximum number of parts in the partition (the sum of the values in
     the returned dict) are limited with m (default value, None, gives
     partitions from 1 through n):
-
+    
     >>> for p in partitions(6, m=2):  # doctest: +SKIP
     ...     print(p)
-    ...
+    ... 
     {6: 1}
-    {1: 1, 5: 1}
+    {1: 1, 5: 1} 
     {2: 1, 4: 1}
     {3: 2}
 
@@ -1788,12 +1788,12 @@
     This is for speed:  generating each partition goes quickly,
     taking constant time, independent of n.
 
-    >>> [p for p in partitions(6, k=2)]
+    >>> [p for p in partitions(6, k=2)] 
     [{1: 6}, {1: 6}, {1: 6}, {1: 6}]
 
     If you want to build a list of the returned dictionaries then
     make a copy of them:
-
+    
     >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP
     [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
     >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
@@ -1802,11 +1802,11 @@
 
     References
     ==========
-
+    
     .. [1] modified from Tim Peter's version to allow for k and m values:
-           http://code.activestate.com/recipes/218332-generator-for-integer-partitions/
+       http://code.activestate.com/recipes/218332-generator-for-integer-partitions/
 
-    See Also
+    See Also 
     ========
 
     sympy.combinatorics.partitions.Partition
@@ -1815,10 +1815,10 @@
     """
     if (n <= 0 or
         m is not None and m < 1 or
-        k is not None and k < 1 or
-        m and k and m*k < n):
+            k is not None and k < 1 or
+            m and k and m*k < n): 
         # the empty set is the only way to handle these inputs
-        # and returning {} to represent it is consistent with
+        # and returning {} to represent it is consistent with 
         # the counting convention, e.g. nT(0) == 1.
         if size:
             yield 0, {}
@@ -1829,7 +1829,7 @@
     if m is None:
         m = n
     else:
-        m = min(m, n)
+        m = min(m, n) 
 
     if n == 0:
         if size:
@@ -1839,12 +1839,12 @@
             yield {0: 1}
         return
 
-    k = min(k or n, n)
+    k = min(k or n, n) 
 
     n, m, k = as_int(n), as_int(m), as_int(k)
     q, r = divmod(n, k)
     ms = {k: q}
-    keys = [k]  # ms.keys(), from largest to smallest
+    keys = [k] # ms.keys(), from largest to smallest
     if r:
         ms[r] = 1
         keys.append(r)
@@ -1855,7 +1855,7 @@
 
     while keys != [1]:
         # Reuse any 1's.
-        if keys[-1] == 1:
+        if keys[-1] == 1: 
             del keys[-1]
             reuse = ms.pop(1)
             room += reuse
@@ -1864,7 +1864,7 @@
 
         while 1:
             # Let i be the smallest key larger than 1.  Reuse one
-            # instance of i.
+            # instance of i. 
             i = keys[-1]
             newcount = ms[i] = ms[i] - 1
             reuse += i
@@ -1872,7 +1872,7 @@
                 del keys[-1], ms[i]
             room += 1
 
-            # Break the remainder into pieces of size i-1.
+            # Break the remainder into pieces of size i-1. 
             i -= 1
             q, r = divmod(reuse, i)
             need = q + bool(r)
@@ -1880,7 +1880,7 @@
             if need > room:
                 if not keys:
                     return
-                continue
+                continue 
 
             ms[i] = q
             keys.append(i)
@@ -1888,7 +1888,7 @@
                 ms[r] = 1
                 keys.append(r)
             break
-        room -= need
+        room -= need 
         if size:
             yield sum(ms.values()), ms
         else:
```