```diff
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -2085,8 +2085,13 @@
 def has_variety(seq):
 def uniq(seq, result=None):
     """
-    Yield unique elements from ``seq`` as an iterator. The second
-    parameter ``result``  is used internally; it is not necessary to pass
+    Yield unique elements from ``seq`` as an iterator. The second
+    parameter ``result``  is used internally; it is not necessary
+    to pass anything for this.
+
+    Note: changing the sequence during iteration will raise a
+    RuntimeError if the size of the sequence is known; if you pass
+    an iterator and advance the iterator you will change the
+    output of this routine but there will be no warning.
 
     Examples
     ========
@@ -2103,17 +2108,22 @@
     >>> list(uniq([[1], [2, 1], [1]]))
     [[1], [2, 1]]
     """
+    def check():
+        # check that size of seq did not change during iteration;
+        # if n == None the object won't support size changing, e.g.
+        # an iterator can't be changed
+        if n is not None and len(seq) != n:
+            raise RuntimeError('sequence changed size during iteration')
     try:
         seen = set()
         result = result or []
+        n = len(seq)
         for i, s in enumerate(seq):
             if not (s in seen or seen.add(s)):
                 yield s
+                check()
     except TypeError:
-        if s not in result:
-            yield s
-            result.append(s)
-        if hasattr(seq, '__getitem__'):
+        n = None
+        for i, s in enumerate(seq):
+            if s not in result:
+                yield s
+                check()
+                result.append(s)
```