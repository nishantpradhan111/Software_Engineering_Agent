```diff
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -536,12 +536,12 @@
         index_op_desc_unique_together = output.find(\'-- alter unique_together\')\n         index_tx_end = output.find(connection.ops.end_transaction_sql().lower())\n \
 \n-        self.assertGreater(index_tx_start, -1, "Transaction start not found")\n+        if connection.features.can_rollback_ddl:\n+            self.assertGreater(index_tx_start, -1, "Transaction start not found")\n+            self.assertGreater(\n+                index_tx_end, index_op_desc_unique_together,\n+                "Transaction end not found or found before operation description (unique_together)"\n+            )\n+\
         self.assertGreater(\n             index_op_desc_author, index_tx_start,\n             "Operation description (author) not found or found before transaction start"\n@@ -553,11 +553,6 @@
             index_op_desc_unique_together, index_op_desc_tribble,\n             "Operation description (unique_together) not found or found before operation description (tribble)"\n         )\n-        self.assertGreater(\n-            index_tx_end, index_op_desc_unique_together,\n-            "Transaction end not found or found before operation description (unique_together)"\n-        )\n \
     @override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations"})\n     def test_sqlmigrate_backwards(self):\n@@ -577,12 +572,12 @@
         index_drop_table = output.rfind(\'drop table\')\n         index_tx_end = output.find(connection.ops.end_transaction_sql().lower())\n \
-        self.assertGreater(index_tx_start, -1, "Transaction start not found")\n+        if connection.features.can_rollback_ddl:\n+            self.assertGreater(index_tx_start, -1, "Transaction start not found")\n+            self.assertGreater(\n+                index_tx_end, index_op_desc_unique_together,\n+                "Transaction end not found or found before DROP TABLE"\n+            )\n         self.assertGreater(\n             index_op_desc_unique_together, index_tx_start,\n             "Operation description (unique_together) not found or found before transaction start"\n@@ -595,11 +590,6 @@
             index_drop_table, index_op_desc_author,\n             "DROP TABLE not found or found before operation description (author)"\n         )\n-        self.assertGreater(\n-            index_tx_end, index_op_desc_unique_together,\n-            "Transaction end not found or found before DROP TABLE"\n-        )\n \
         # Cleanup by unmigrating everything\n         call_command("migrate", "migrations", "zero", verbosity=0)\n@@ -616,6 +606,22 @@
             self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n         self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n \
+    @override_settings(MIGRATION_MODULES={\'migrations\': \'migrations.test_migrations\'})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren\'t shown for databases that don\'t support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, \'can_rollback_ddl\', False):\n+            call_command(\'sqlmigrate\', \'migrations\', \'0001\', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\
     @override_settings(\n         INSTALLED_APPS=[\n             "migrations.migrations_test_apps.migrated_app",\
```