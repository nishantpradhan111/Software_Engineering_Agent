```diff
--- a/sympy/core/mul.py
+++ a/sympy/core/mul.py
@@ -1271,30 +1271,28 @@ def _eval_is_integer(self):
             return False
 
         # use exact=True to avoid recomputing num or den
-        n, d = fraction(self, exact=True)
-        if is_rational:
-            if d is S.One:
-                return True
-        if d.is_even:
-            if d.is_prime:  # literal or symbolic 2
-                return n.is_even
-            if n.is_odd:
-                return False  # true even if d = 0
-        if n == d:
-            return fuzzy_and([not bool(self.atoms(Float)),
-            fuzzy_not(d.is_zero)])
+        numers = []
+        denoms = []
+        for arg in self.args:
+            if arg.is_Rational:
+                n, d = arg.as_numer_denom()
+                numers.append(n)
+                denoms.append(d)
+            elif arg.is_integer:
+                numers.append(arg)
+            elif arg.is_Pow and arg.exp is S.NegativeOne and arg.base.is_integer:
+                denoms.append(arg.base)
+            else:
+                return None
 
-    def _eval_is_polar(self):
-        has_polar = any(arg.is_polar for arg in self.args)
-        if has_polar is not None:
-            return True
+        if not denoms:
+            return True
+        if any(n.is_even for n in numers):
+            if len(denoms) == 1 and denoms[0] == 2:
+                return True
+        if all(n.is_odd for n in numers) and any(d.is_even for d in denoms):
+            return False
+        return None
 
-        # Non-recursive implementation for Add
-        # If any argument is zero-dimensional, the entire expression is zero-dimensional
-        # Otherwise, the expression is zero-dimensional if all arguments are zero-dimensional
-        if any(arg.is_zero_dimensional is True for arg in self.args):
-            return True
-        if all(arg.is_zero_dimensional is not False for arg in self.args):
-            return True
+    def _eval_is_polar(self):
+        return any(arg.is_polar for arg in self.args)
```