```diff
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1902,12 +1902,12 @@ def _print_Mul(self, product):
             return prettyForm.__mul__(*a)/prettyForm.__mul__(*b)
 
     # A helper function for _print_Pow to print x**(1/n)
-    def _print_nth_root(self, base, expt):
+    def _print_nth_root(self, base, root):
         bpretty = self._print(base)
 
         # In very simple cases, use a single-char root sign
         if (self._settings[\'use_unicode_sqrt_char\'] and self._use_unicode
-            and expt is S.Half and bpretty.height() == 1
+            and root == 2 and bpretty.height() == 1
             and (bpretty.width() == 1
                  or (base.is_Integer and base.is_nonnegative))):
             return prettyForm(*bpretty.left(\'\\N{SQUARE ROOT}\'))
@@ -1915,14 +1915,13 @@ def _print_nth_root(self, base, expt):\
         # Construct root sign, start with the \\/ shape
         _zZ = xobj(\'/\', 1)
         rootsign = xobj(\'\\\\\', 1) + _zZ
-        # Make exponent number to put above it
-        if isinstance(expt, Rational):\
-            exp = str(expt.q)\
-            if exp == \'2\':
-                exp = \'\'
-        else:\
-            exp = str(expt.args[0])
-        exp = exp.ljust(2)\
+        # Constructing the number to put on root
+        rpretty = self._print(root)
+        # roots look bad if they are not a single line
+        if rpretty.height() != 1:
+            return self._print(base)**self._print(1/root)
+        # If power is half, no number should appear on top of root sign
+        exp = '' if root == 2 else str(rpretty).ljust(2)
         if len(exp) > 2:
             rootsign = ' '*(len(exp) - 2) + rootsign
         # Stack the exponent
@@ -1934,8 +1933,9 @@ def _print_Pow(self, power):
             if e is S.NegativeOne:
                 return prettyForm("1")/self._print(b)
             n, d = fraction(e)
-            if n is S.One and d.is_Atom and not e.is_Integer and self._settings[\'root_notation\']:\
-                return self._print_nth_root(b, e)\
+            if n is S.One and d.is_Atom and not e.is_Integer and (e.is_Rational or d.is_Symbol) and \
+                    self._settings[\'root_notation\']:\
+                return self._print_nth_root(b, d)
             if e.is_Rational and e < 0:
                 return prettyForm("1")/self._print(Pow(b, -e, evaluate=False))
```