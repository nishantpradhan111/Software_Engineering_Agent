```diff
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -9,7 +9,7 @@
 import traceback
 import typing as t
 from functools import update_wrapper
-from operator import attrgetter
+from operator import itemgetter
 
 import click
 from click.core import ParameterSource
@@ -989,49 +989,62 @@ def shell_command() -> None:\n @click.option(\n     "--sort",\n     "-s",\n-    type=click.Choice(("endpoint", "methods", "rule", "match")),\n+    type=click.Choice(("endpoint", "methods", "domain", "rule", "match")),\n     default="endpoint",
     help=(\
-        \'Method to sort routes by. "match" is the order that Flask will match \'\n-        "routes when dispatching a request."\n+        "Method to sort routes by. \'match\' is the order that Flask will match routes"\n+        " when dispatching a request."\n     ),\n )\n @click.option("--all-methods", is_flag=True, help="Show HEAD and OPTIONS methods.")
 @with_appcontext
 def routes_command(sort: str, all_methods: bool) -> None:\n     """Show all registered routes with endpoints and methods."""
-\n     rules = list(current_app.url_map.iter_rules())\n+\n     rules = list(current_app.url_map.iter_rules())\n     if not rules:\n         click.echo("No routes were registered.")\n         return\n \
-\n     ignored_methods = set(() if all_methods else ("HEAD", "OPTIONS"))\n+    ignored_methods = set() if all_methods else {"HEAD", "OPTIONS"}\n     host_matching = current_app.url_map.host_matching\n     has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n     rows = []\n \
-\n     if sort in ("endpoint", "rule"):\n-        rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == "methods":\n-        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n+    for rule in rules:\n+        methods = ", ".join(sorted((rule.methods or set()) - ignored_methods))\n+        if not methods:\n+            methods = "-"\n+        row = [\n+            rule.endpoint,\n+            methods,\n+        ]\n \
-\n     rule_methods = [\n-        ", ".join(sorted(rule.methods - ignored_methods))  # type: ignore\n-        for rule in rules\n-    ]\n+        if has_domain:\n+            row.append((rule.host if host_matching else rule.subdomain) or "")\n \
-\n     headers = ("Endpoint", "Methods", "Rule")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n-    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}".format(*widths)\n+        row.append(rule.rule)\n+        rows.append(row)\n+\n+    headers = ["Endpoint", "Methods"]\n+    sorts = ["endpoint", "methods"]\n+\n+    if has_domain:\n+        headers.append("Domain" if host_matching else "Subdomain")\n+        sorts.append("domain")\n+\n+    headers.append("Rule")\n+    sorts.append("rule")\n+\n+    try:\n+        rows.sort(key=itemgetter(sorts.index(sort)))\n+    except ValueError:\n+        pass\n \
-\n     click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*("-" * width for width in widths)))\n+    rows.insert(0, headers)\n+    widths = [max(len(str(row[i])) for row in rows) for i in range(len(headers))]\n+    rows.insert(1, ["-" * w for w in widths])\n+    template = "  ".join(f"{{{i}:<{w}}}" for i, w in enumerate(widths))\n \
-\n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for row in rows:\n+        click.echo(template.format(*row))\n \
 \
 cli = FlaskGroup(\n
```