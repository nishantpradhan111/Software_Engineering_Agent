```diff
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -931,30 +931,27 @@ def _print_BasisDependent(self, expr):
         #Fixing the newlines
         lengths = []
         strs = ['']
-        flag = []
         for i, partstr in enumerate(o1):
-            flag.append(0)\
+            flag = 0
             # XXX: What is this hack?
-            if '\\n' in partstr:\
+            if '\\n' in partstr:
                 tempstr = partstr
                 tempstr = tempstr.replace(vectstrs[i], '')
-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\
-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\
-                                          + ' ' + vectstrs[i])\
                 if u'\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction
-                    flag[i] = 1
+                    flag = 1
                     for paren in range(len(tempstr)):
                         if tempstr[paren] == u'\\N{right parenthesis extension}':
                             tempstr = tempstr[:paren] + u'\\N{right parenthesis extension}'\
                                          + ' '  + vectstrs[i] + tempstr[paren + 1:]
                             break
                 elif u'\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:
-                    flag[i] = 1
+                    flag = 1
                     tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS LOWER HOOK}',
                                         u'\\N{RIGHT PARENTHESIS LOWER HOOK}'
                                         + ' ' + vectstrs[i])
-                else:\
+                else:
+                    flag = 1
                     tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',
                                         u'\\N{RIGHT PARENTHESIS UPPER HOOK}'
                                         + ' ' + vectstrs[i])
@@ -962,14 +959,10 @@
 
         o1 = [x.split('\\n') for x in o1]
         n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form
-
-        if 1 in flag:                           # If there was a fractional scalar
-            for i, parts in enumerate(o1):\
-                if len(parts) == 1:             # If part has no newline
-                    parts.insert(0, ' ' * (len(parts[0])))\
-                    flag[i] = 1
-
         for i, parts in enumerate(o1):\
-            lengths.append(len(parts[flag[i]]))
+            if len(parts) > 1:
+                lengths.append(len(parts[1]))
+            else:
+                lengths.append(len(parts[0]))
             for j in range(n_newlines):\
                 try:
                     strs.append(parts[j])
```