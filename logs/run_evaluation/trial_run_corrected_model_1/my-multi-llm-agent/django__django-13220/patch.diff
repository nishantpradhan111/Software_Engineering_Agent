```diff
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -1,7 +1,6 @@
 """
 Global Django exception and warning classes.
 """
-import operator
 
 from django.utils.hashable import make_hashable
 
@@ -182,18 +181,13 @@
     def __repr__(self):
         return 'ValidationError(%s)' % self
 
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+            return NotImplemented
+        return hash(self) == hash(other)
+
     def __hash__(self):
         # Ignore params and messages ordering.
         if hasattr(self, 'message'):
-            return hash((self.message, self.code, tuple(sorted(self.params.items())) if self.params else None))
+            return hash((self.message, self.code, tuple(sorted(make_hashable(self.params))) if self.params else None))
         if hasattr(self, 'error_dict'):
-            return hash(tuple(sorted((k, tuple(v)) for k, v in self.error_dict.items())))
+            return hash(tuple(sorted(make_hashable(self.error_dict))))
         return hash(tuple(sorted(self.error_list, key=operator.attrgetter('message'))))
-
-    def __eq__(self, other):
-        if not isinstance(other, ValidationError):
-            return NotImplemented
-        return hash(self) == hash(other)
-
-    def __hash__(self):
-        # Ignore params and messages ordering.
-        if hasattr(self, 'message'):
-            return hash((
-                self.message,
-                self.code,
-                tuple(sorted(make_hashable(self.params))) if self.params else None,
-            ))
-        if hasattr(self, 'error_dict'):
-            return hash(tuple(sorted(make_hashable(self.error_dict))))
-        return hash(tuple(sorted(self.error_list, key=operator.attrgetter('message'))))
-
-
```