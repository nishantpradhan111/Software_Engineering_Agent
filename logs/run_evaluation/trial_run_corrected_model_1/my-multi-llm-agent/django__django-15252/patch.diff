```diff
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -96,10 +96,9 @@ def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False
         (un)applied and in a second step run all the database operations.
         """
         # The django_migrations table must be present to record applied
-        # migrations.
-        self.recorder.ensure_schema()
-
+        # migrations, but don't create it if there are no migrations to
+        # apply.
         if plan:
             self.recorder.ensure_schema()
         if plan is None:
             plan = self.migration_plan(targets)

--- a/tests/backends/base/test_creation.py
+++ b/tests/backends/base/test_creation.py
@@ -59,12 +59,10 @@
 @mock.patch.object(connection, 'ensure_connection')
 @mock.patch.object(connection, 'prepare_database')
 @mock.patch('django.db.migrations.recorder.MigrationRecorder.has_table', return_value=False)
-@mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')
 @mock.patch('django.core.management.commands.migrate.Command.sync_apps')
 class TestDbCreationTests(SimpleTestCase):
     available_apps = ['backends.base.app_unmigrated']
 
-
-    def test_migrate_test_setting_false(self, mocked_sync_apps, mocked_migrate, *mocked_objects):
+    @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')
+    def test_migrate_test_setting_false(self, mocked_migrate, mocked_sync_apps, *mocked_objects):
         test_connection = get_connection_copy()
         test_connection.settings_dict['TEST']['MIGRATE'] = False
         creation = test_connection.creation_class(test_connection)
@@ -77,12 +75,11 @@
             with mock.patch.object(creation, '_destroy_test_db'):
                 creation.destroy_test_db(old_database_name, verbosity=0)
 
-
     @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')
-    def test_migrate_test_setting_true(self, mocked_sync_apps, mocked_migrate, *mocked_objects):
+    @mock.patch('django.db.migrations.recorder.MigrationRecorder.ensure_schema')
+    def test_migrate_test_setting_false_ensure_schema(self, mocked_ensure_schema, mocked_migrate, mocked_sync_apps, *mocked_objects):
         test_connection.settings_dict['TEST']['MIGRATE'] = True
         creation = test_connection.creation_class(test_connection)
-        if connection.vendor == 'oracle':
         with self.assertRaises(SkipTest, msg='Oracle tests cannot use serialized dumps.'):
             with mock.patch.object(creation, '_create_test_db'):
                 creation.create_test_db(verbosity=0, autoclobber=True, serialize=False)
@@ -90,7 +87,7 @@
             mocked_ensure_schema.assert_not_called()
             # App is synced.
             mocked_sync_apps.assert_called()
-        finally:
+
             with mock.patch.object(creation, '_destroy_test_db'):
                 creation.destroy_test_db(old_database_name, verbosity=0)
 
--- a/tests/migrations/test_executor.py
+++ b/tests/migrations/test_executor.py
@@ -755,7 +755,6 @@
             False,
         )
 
-
     @mock.patch.object(MigrationRecorder, 'has_table', return_value=False)
     def test_migrate_skips_schema_creation(self, mocked_has_table):
         """
```