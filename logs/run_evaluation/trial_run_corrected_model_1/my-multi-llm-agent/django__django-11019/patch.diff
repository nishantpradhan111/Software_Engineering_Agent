```diff
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -6,6 +6,7 @@
 import datetime
 import re
 import warnings
+from collections import defaultdict
 from itertools import chain
 
 from django.conf import settings
@@ -13,6 +14,7 @@
 from django.templatetags.static import static
 from django.utils import datetime_safe, formats
 from django.utils.datastructures import OrderedSet
+from django.utils.functional import cached_property
 from django.utils.dates import MONTHS
 from django.utils.formats import get_format
 from django.utils.html import format_html, html_safe
@@ -28,23 +30,21 @@
     def __str__(self):
 
     @property
-    def _css(self):
-        css = self._css_lists[0]
-        # filter(None, ...) avoids calling merge with empty dicts.
-        for obj in filter(None, self._css_lists[1:]):
-            css = {
-                medium: self.merge(css.get(medium, []), obj.get(medium, []))
-                for medium in css.keys() | obj.keys()
-            }
-        return css
+    def css(self):
+        return self._css
 
     @property
-    def _js(self):
-        js = self._js_lists[0]
-        # filter(None, ...) avoids calling merge() with empty lists.
-        for obj in filter(None, self._js_lists[1:]):
-            js = self.merge(js, obj)
-        return js
+    def js(self):
+        return self._js
+
+    @cached_property
+    def _css(self):
+        css = defaultdict(list)
+        for css_list in self._css_lists:
+            for medium, sublist in css_list.items():
+                css[medium].extend(sublist)
+        # deduplicate and preserve order
+        return {medium: self.merge(sublist) for medium, sublist in css.items()}
 
     def render(self):
         return mark_safe('\n'.join(chain.from_iterable(getattr(self, 'render_' + name)() for name in MEDIA_TYPES)))
@@ -71,10 +71,10 @@
         raise KeyError('Unknown media type "%s"' % name)
 
     @staticmethod
-    def merge(list_1, list_2):
+    def merge(*lists):
         """
-        Merge two lists while trying to keep the relative order of the elements.
-        Warn if the lists have the same two elements in a different relative
+        Merge lists while trying to keep the relative order of the elements.
+        Warn if the lists have the same elements in a different relative
         order.
 
         For static assets it can be important to have them included in the DOM
@@ -82,36 +82,17 @@
         global or in CSS you might want to override a style.
         """
         # Start with a copy of list_1.
-        combined_list = list(list_1)
-        last_insert_index = len(list_1)
-        # Walk list_2 in reverse, inserting each element into combined_list if
-        # it doesn't already exist.
-        for path in reversed(list_2):
-            try:
-                # Does path already exist in the list?
-                index = combined_list.index(path)
-            except ValueError:
-                # Add path to combined_list since it doesn't exist.
-                combined_list.insert(last_insert_index, path)
-            else:
-                if index > last_insert_index:
-                    warnings.warn(
-                        'Detected duplicate Media files in an opposite order:\n'
-                        '%s\n%s' % (combined_list[last_insert_index], combined_list[index]),
-                        MediaOrderConflictWarning,
-                    )
-                # path already exists in the list. Update last_insert_index so
-                # that the following elements are inserted in front of this one.
-                last_insert_index = index
-        return combined_list
-
-    def __add__(self, other):
-        combined = Media()
-
-        def fix(name):
-            if name:
-                return [name]
-
-        combined._css_lists = [self._css_lists, other._css_lists]
-        combined._js_lists = [self._js_lists, other._js_lists]
-        return combined
+        seen = set()
+        result = []
+        for items in lists:
+            for item in items:
+                if item not in seen:
+                    result.append(item)
+                    seen.add(item)
+        return result
+
+    @cached_property
+    def _js(self):
+        # deduplicate and preserve order
+        # cast to list as self._js_lists might contain generator expressions
+        return self.merge(*list(self._js_lists))
```