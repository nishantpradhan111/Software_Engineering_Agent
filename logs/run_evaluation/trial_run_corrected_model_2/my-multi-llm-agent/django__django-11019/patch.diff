```diff
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -6,6 +6,7 @@
 import datetime
 import re
 import warnings
+from collections import defaultdict
 from itertools import chain
 
 from django.conf import settings
@@ -13,6 +14,7 @@
 from django.templatetags.static import static
 from django.utils import datetime_safe, formats
 from django.utils.dates import MONTHS
+from django.utils.datastructures import OrderedSet
 from django.utils.formats import get_format
 from django.utils.html import format_html, html_safe
 from django.utils.safestring import mark_safe
@@ -21,7 +23,7 @@
     CyclicDependencyError, stable_topological_sort,
 )
 from django.utils.translation import gettext_lazy as _
-
+from django.utils.version import get_version
 from .renderers import get_default_renderer
 
 
@@ -59,22 +61,15 @@ def __str__(self):\
 
     @property
     def _css(self):\
-        css = self._css_lists[0]\
-        # filter(None, ...) avoids calling merge with empty dicts.\
-        for obj in filter(None, self._css_lists[1:]):\
-            css = {\
-                medium: self.merge(css.get(medium, []), obj.get(medium, []))\
-                for medium in css.keys() | obj.keys()\
-            }\
-        return css\
+        css = defaultdict(list)
+        for css_list in self._css_lists:
+            for medium, sublist in css_list.items():
+                css[medium].append(sublist)
+        return {medium: self.merge(*lists) for medium, lists in css.items()}
 
     @property
     def _js(self):\
-        js = self._js_lists[0]\
-        # filter(None, ...) avoids calling merge() with empty lists.\
-        for obj in filter(None, self._js_lists[1:]):\
-            js = self.merge(js, obj)\
-        return js\
+        return self.merge(*self._js_lists)
 
     def render(self):\
         return mark_safe('\n'.join(chain.from_iterable(getattr(self, 'render_' + name)() for name in MEDIA_TYPES)))
@@ -148,7 +143,7 @@
                 head = item
         try:
             return stable_topological_sort(all_items, dependency_graph)
-        except CyclicDependencyError:
+        except CyclicDependencyError:  # pragma: no cover
             message = 'Detected Media files with cyclic dependencies: {}.'.format(', '.join(repr(item) for item in all_items))
             warnings.warn(
                 message,
```