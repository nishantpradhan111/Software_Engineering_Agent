```diff
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -9,7 +9,7 @@
 import traceback
 import typing as t
 from functools import update_wrapper
-from operator import attrgetter
+from operator import itemgetter
 
 import click
 from click.core import ParameterSource
@@ -989,49 +989,47 @@ def shell_command() -> None:
 @click.option(\
     "--sort",\
     "-s",
-    type=click.Choice(("endpoint", "methods", "rule", "match")),\
+    type=click.Choice(("endpoint", "methods", "domain", "rule", "match")),
     default="endpoint",
     help=(\
-        \'Method to sort routes by. "match" is the order that Flask will match \'\
-        "routes when dispatching a request."\
+        "Method to sort routes by. 'match' is the order that Flask will match routes"\
+        " when dispatching a request."\
     ),\
 )\
 @click.option("--all-methods", is_flag=True, help="Show HEAD and OPTIONS methods.")
 @with_appcontext
 def routes_command(sort: str, all_methods: bool) -> None:
-\n     rules = list(current_app.url_map.iter_rules())\n+\n    if not rules:\n        click.echo("No routes were registered.")\n        return\n \
--    ignored_methods = set(() if all_methods else ("HEAD", "OPTIONS"))\n+    ignored_methods = set() if all_methods else {"HEAD", "OPTIONS"}\n+    host_matching = current_app.url_map.host_matching\n+    has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n+    rows = []\n \
-\n-    if sort in ("endpoint", "rule"):\n-        rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == "methods":\n-        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n+    for rule in rules:\n+        row = [\n+            rule.endpoint,\n+            ", ".join(sorted((rule.methods or set()) - ignored_methods)),\n+        ]\n \
-\n-    rule_methods = [\n-        ", ".join(sorted(rule.methods - ignored_methods))  # type: ignore\n-        for rule in rules\n-    ]\n+        if has_domain:\n+            row.append((rule.host if host_matching else rule.subdomain) or "")\n \
-\n-    headers = ("Endpoint", "Methods", "Rule")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n-    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}".format(*widths)\n+        row.append(rule.rule)\n+        rows.append(row)\n+\n+    headers = ["Endpoint", "Methods"]\n+    if has_domain:\n+        headers.append("Host" if host_matching else "Subdomain")\n+    headers.append("Rule")\n+\n+    sort_index = {"endpoint": 0, "methods": 1, "domain": 2, "rule": 3}.get(sort, 0)\n+    rows.sort(key=itemgetter(sort_index))\n \
-\n-    click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*("-" * width for width in widths)))\n+    rows.insert(0, headers)\n+    widths = [max(len(str(row[i]))) for i in range(len(headers)) for row in rows]\n+    template = "  ".join(f"{{{i}:<{widths[i]}}}" for i in range(len(headers)))\n \
-\n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for row in rows:\n+        click.echo(template.format(*row).rstrip())\
 \
 \n cli = FlaskGroup(\
--- a/tests/test_cli.py
+++ b/tests/test_cli.py
@@ -433,16 +433,12 @@ class TestRoutes:\n     @pytest.fixture\n     def app(self):\n         app = Flask(__name__)\n-        app.testing = True\n-\n-        @app.route("/get_post/<int:x>/<int:y>", methods=["GET", "POST"])\n-        def yyy_get_post(x, y):\n-            pass\n-\n-        @app.route("/zzz_post", methods=["POST"])\n-        def aaa_post():\n-            pass\n-\n+        app.add_url_rule(\n+            "/get_post/<int:x>/<int:y>",\n+            endpoint="yyy_get_post",\n+            methods=["GET", "POST"],\n+        )\n+        app.add_url_rule("/zzz_post", endpoint="aaa_post", methods=["POST"])\n         return app\n \
     @pytest.fixture\n@@ -450,17 +446,6 @@ def invoke(self, app, runner):\n         cli = FlaskGroup(create_app=lambda: app)\n         return partial(runner.invoke, cli)\n \
-    @pytest.fixture\n-    def invoke_no_routes(self, runner):\n-        def create_app():\n-            app = Flask(__name__, static_folder=None)\n-            app.testing = True\n-\n-            return app\n-\n-        cli = FlaskGroup(create_app=create_app)\n-        return partial(runner.invoke, cli)\n-\
     def expect_order(self, order, output):\n         # skip the header and match the start of each row\n         for expect, line in zip(order, output.splitlines()[2:]):\n@@ -493,10 +478,28 @@ def test_all_methods(self, invoke):\n         output = invoke(["routes", "--all-methods"]).output\n         assert "GET, HEAD, OPTIONS, POST" in output\n \
-    def test_no_routes(self, invoke_no_routes):\n-        result = invoke_no_routes(["routes"])\n+    def test_no_routes(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, ["routes"])\n         assert result.exit_code == 0\n         assert "No routes were registered." in result.output\n \
+\n+    def test_subdomain(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        app.add_url_rule("/a", subdomain="a", endpoint="a")\n+        app.add_url_rule("/b", subdomain="b", endpoint="b")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, ["routes"])\n+        assert result.exit_code == 0\n+        assert "Subdomain" in result.output\n+\n+    def test_host(self, runner):\n+        app = Flask(__name__, static_folder=None, host_matching=True)\n+        app.add_url_rule("/a", host="a", endpoint="a")\n+        app.add_url_rule("/b", host="b", endpoint="b")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, ["routes"])\n+        assert result.exit_code == 0\n+        assert "Host" in result.output\n+\
 \
 def dotenv_not_available():\n     try:
```