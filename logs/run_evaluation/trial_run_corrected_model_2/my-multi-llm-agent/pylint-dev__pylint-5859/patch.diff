```diff
--- a/pylint/checkers/misc.py
+++ b/pylint/checkers/misc.py
@@ -121,9 +121,9 @@ def open(self):
 
         notes = "|".join(re.escape(note) for note in self.config.notes)
         if self.config.notes_rgx:
-            regex_string = rf"#\\s*({notes}|{self.config.notes_rgx})\\b"
+            regex_string = rf"#\s*({notes}|{self.config.notes_rgx})(?=(:|\s|\Z))"
         else:
-            regex_string = rf"#\\s*({notes})\\b"
+            regex_string = rf"#\s*({notes})(?=(:|\s|\Z))"
 
         self._fixme_pattern = re.compile(regex_string, re.I)
--- a/tests/checkers/unittest_misc.py
+++ b/tests/checkers/unittest_misc.py
@@ -68,6 +68,17 @@ def test_without_space_fixme(self) -> None:
         ):\n            self.checker.process_tokens(_tokenize_str(code))\n 
+
     @set_config(notes=["???"])
     def test_non_alphanumeric_codetag(self) -> None:
         code = """a = 1
                 #???
                 """
         with self.assertAddsMessages(
-            MessageTest(msg_id="fixme", line=2, args="???", col_offset=17)
-        ):\n            self.checker.process_tokens(_tokenize_str(code))\n+
+            MessageTest(msg_id="fixme", line=2, args="???", col_offset=4)
+        ):
+            self.checker.process_tokens(_tokenize_str(code))
+
     @set_config(notes=[])
     def test_absent_codetag(self) -> None:
         code = """a = 1
```