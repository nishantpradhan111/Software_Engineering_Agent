```diff
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -110,15 +110,15 @@
 import warnings
 
 import numpy
+from collections import namedtuple
 import re
 from packaging.version import parse as parse_version
 
 # cbook must import matplotlib only within function
 # definitions, so it is safe to import from it here.
 from . import _api, _version, cbook, docstring, rcsetup
-from matplotlib.cbook import MatplotlibDeprecationWarning, sanitize_sequence
-from matplotlib.cbook import mplDeprecation  # deprecated
 from matplotlib.rcsetup import validate_backend, cycler
+from matplotlib.cbook import sanitize_sequence
 
 
 _log = logging.getLogger(__name__)
@@ -131,14 +131,11 @@
   year      = 2007
 }"""
 
-# modelled after sys.version_info
 _VersionInfo = namedtuple('_VersionInfo',
                           'major, minor, micro, releaselevel, serial')
 
-
-def __getattr__(name):
-    if name == "__version__":
-        import setuptools_scm
-        global __version__  # cache it.
+
+def _get_version():
         # Only shell out to a git subprocess if really needed, and not on a
         # shallow clone, such as those used by CI, as the latter would trigger
         # a warning from setuptools_scm.
@@ -152,10 +149,6 @@
         else:  # Get the version from the _version.py setuptools_scm file.
             __version__ = _version.version
         return __version__
-
-
-def _parse_to_version_info(version_str):
-    """
     Parse a version string to a namedtuple analogous to sys.version_info.
 
     See:
@@ -163,7 +156,7 @@
     https://docs.python.org/3/library/sys.html#sys.version_info
     """
     v = parse_version(version_str)
-    if v.pre is None and v.post is None and v.dev is None:
+    if (v.pre is None) and (v.post is None) and (v.dev is None):
         return _VersionInfo(v.major, v.minor, v.micro, 'final', 0)
     elif v.dev is not None:
         return _VersionInfo(v.major, v.minor, v.micro, 'alpha', v.dev)
@@ -178,19 +171,12 @@
         return _VersionInfo(v.major, v.minor, v.micro + 1, 'alpha', v.post)
 
 
-def _get_version():
-    """Return the version string used for __version__."""
-    # Only shell out to a git subprocess if really needed, and not on a
-    # shallow clone, such as those used by CI, as the latter would trigger
-    # a warning from setuptools_scm.
-    root = Path(__file__).resolve().parents[2]
-    if (root / ".git").exists() and not (root / ".git/shallow").exists():
-        import setuptools_scm
-        return setuptools_scm.get_version(
-            root=root,
-            version_scheme="post-release",
-            local_scheme="node-and-date",
-            fallback_version=_version.version,
+def __getattr__(name):
+    if name in ("__version__", "__version_info__"):
+        global __version__  # cache it.
+        __version__ = _get_version()
+        global __version_info__  # cache it.
+        __version_info__ = _parse_to_version_info(__version__)
+        return __version__ if name == "__version__" else __version_info__
+    raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
         )
     else:  # Get the version from the _version.py setuptools_scm file.
         return _version.version
@@ -198,8 +184,6 @@
 
 
 def __getattr__(name):
-    if name in ("__version__", "__version_info__"):
-        global __version__  # cache it.
-        __version__ = _get_version()
-        global __version_info__  # cache it.
-        __version_info__ = _parse_to_version_info(__version__)
-        return __version__ if name == "__version__" else __version_info__
     raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
 
 
```