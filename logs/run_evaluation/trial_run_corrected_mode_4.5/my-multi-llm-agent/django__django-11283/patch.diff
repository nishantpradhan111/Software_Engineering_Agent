```diff
--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py
+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
@@ -1,7 +1,4 @@
-from django.db import migrations
 import sys
-
-from django.core.management.color import color_style
 from django.db import migrations, transaction
 from django.db.models import Q
 from django.db.utils import IntegrityError
@@ -23,7 +20,6 @@
     Update the content_type of proxy model permissions to use the ContentType
     of the proxy model.
     """
-    style = color_style()
     Permission = apps.get_model('auth', 'Permission')
     ContentType = apps.get_model('contenttypes', 'ContentType')
     for Model in apps.get_models():
@@ -35,15 +31,14 @@
         new_content_type = concrete_content_type if reverse else proxy_content_type
         try:
             with transaction.atomic():
-                Permission.objects.filter(
-                    permissions_query,
-                    content_type=old_content_type,
-                ).update(content_type=new_content_type)
-        except IntegrityError:
-            old = '{}_{}'.format(old_content_type.app_label, old_content_type.model)
-            new = '{}_{}'.format(new_content_type.app_label, new_content_type.model)
-            sys.stdout.write(style.WARNING(WARNING.format(old=old, new=new, query=permissions_query)))
+                count = Permission.objects.filter(permissions_query, content_type=old_content_type).update(
+                    content_type=new_content_type
+                )
+        except IntegrityError as e:
+            if 'duplicate key value violates unique constraint' not in str(e):
+                raise
+            else:
+                old = '{}_{}'.format(old_content_type.app_label, old_content_type.model)
+                new = '{}_{}'.format(new_content_type.app_label, new_content_type.model)
+                sys.stdout.write(WARNING.format(old=old, new=new, query=permissions_query))
```