```diff
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -933,37 +933,28 @@
         lengths = []
         strs = ['']
         flag = []
-        flag = [0]*len(o1)
+        flag = [0] * len(o1)
         for i, partstr in enumerate(o1):
-            flag.append(0)\
             # XXX: What is this hack?
-            if '\\n' in partstr:\
+            if '\\n' in partstr:
                 tempstr = partstr
                 tempstr = tempstr.replace(vectstrs[i], '')
-                if u'\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction
+                if u'\\N{right parenthesis extension}' in tempstr:  # If scalar is a fraction
                     flag[i] = 1
                     for paren in range(len(tempstr)):
                         if tempstr[paren] == u'\\N{right parenthesis extension}':
-                            tempstr = tempstr[:paren] + u'\\N{right parenthesis extension}'\
-                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]
+                            tempstr = tempstr[:paren] + u'\\N{right parenthesis extension}' + ' ' + vectstrs[i] + tempstr[paren + 1:]
                             break
                 elif u'\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:
                     flag[i] = 1
                     tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS LOWER HOOK}',
-                                        u'\\N{RIGHT PARENTHESIS LOWER HOOK}'
-                                        + ' ' + vectstrs[i])
-                else:\
+                                               u'\\N{RIGHT PARENTHESIS LOWER HOOK}' + ' ' + vectstrs[i])
+                else:
                     tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                        u'\\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                        + ' ' + vectstrs[i])
+                                               u'\\N{RIGHT PARENTHESIS UPPER HOOK}' + ' ' + vectstrs[i])
                 o1[i] = tempstr
 
         o1 = [x.split('\\n') for x in o1]
         n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form
-
-        if 1 in flag:                           # If there was a fractional scalar
-            for i, parts in enumerate(o1):\
-                if len(parts) == 1:             # If part has no newline
-                    parts.insert(0, ' ' * (len(parts[0])))\
-                    flag[i] = 1
-
         for i, parts in enumerate(o1):
             lengths.append(len(parts[flag[i]]))
             for j in range(n_newlines):
@@ -971,9 +962,7 @@ def _print_BasisDependent(self, expr):
                      else:
                          strs[j] += parts[j] + ' '*(lengths[-1] -\
                                                    len(parts[j])+\
-                                                   3)
+                                                   3)  # Adding padding
         for i in range(len(strs)):
             strs[i] = strs[i].rstrip(' +')
         return u'\n'.join(strs)
```