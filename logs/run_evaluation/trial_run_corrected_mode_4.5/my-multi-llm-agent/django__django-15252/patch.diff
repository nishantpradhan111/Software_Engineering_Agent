```diff
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -93,10 +93,10 @@ def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False
         (un)applied and in a second step run all the database operations.
         """
         # The django_migrations table must be present to record applied
-        # migrations.
+        # migrations, but don't create it if there are no migrations to
+        # apply.
         if not plan:
             return self._create_project_state(with_applied_migrations=False)
-        self.recorder.ensure_schema()
 
         if plan is None:
             plan = self.migration_plan(targets, state=state)
--- a/tests/backends/base/test_creation.py
+++ b/tests/backends/base/test_creation.py
@@ -131,7 +131,6 @@
                 creation.destroy_test_db(old_database_name, verbosity=0)
 
     @mock.patch.dict(os.environ, {'RUNNING_DJANGOS_TEST_SUITE': ''})
-    @mock.patch('django.db.migrations.recorder.MigrationRecorder.ensure_schema')
     @mock.patch('django.db.migrations.executor.MigrationExecutor.migrate')
     @mock.patch.object(BaseDatabaseCreation, 'mark_expected_failures_and_skips')
     def test_mark_expected_failures_and_skips_call(self, mark_expected_failures_and_skips, *mocked_objects):
--- a/tests/migrations/test_executor.py
+++ b/tests/migrations/test_executor.py
@@ -759,16 +759,6 @@ def apply(self, project_state, schema_editor, collect_sql=False):
             False,
         )
 
-    @mock.patch('django.db.migrations.recorder.MigrationRecorder.ensure_schema')
-    @mock.patch.object(MigrationRecorder, 'has_table', return_value=False)
-    def test_migrate_skips_schema_creation(self, mocked_has_table, mocked_ensure_schema):
-        """
-        The django_migrations table is not created if there are no migrations
-        to record.
-        """
-        executor = MigrationExecutor(connection)
-        executor.migrate(targets=[], plan=[])
-        mocked_ensure_schema.assert_not_called()
-
     @mock.patch.object(MigrationRecorder, 'has_table', return_value=False)
     def test_migrate_skips_schema_creation(self, mocked_has_table):
         """
```