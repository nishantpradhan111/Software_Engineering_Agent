```diff
--- a/src/_pytest/mark/evaluate.py
+++ b/src/_pytest/mark/evaluate.py
@@ -6,24 +6,13 @@
 from typing import Any
 from typing import Dict
 
-from ..outcomes import fail
-from ..outcomes import TEST_OUTCOME
-from .structures import Mark
-from _pytest.config import Config
-from _pytest.nodes import Item
-from _pytest.store import StoreKey
+
+def compiled_eval(expr: str, d: Dict[str, object]) -> Any:
+    """Evaluate an expression with a given dictionary."""
+    import _pytest._code
+
+    exprcode = _pytest._code.compile(expr, mode="eval")
+    return eval(exprcode, d)
 
 
-evalcache_key = StoreKey[Dict[str, Any]]()
-
-\
-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-\n-        exprcode = _pytest._code.compile(expr, mode="eval")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n
-
-
 class MarkEvaluator:
@@ -98,7 +87,7 @@ def _istrue(self) -> bool:
                     self.expr = expr
                     if isinstance(expr, str):\
                         d = self._getglobals()
-                        result = cached_eval(self.item.config, expr, d)
+                        result = compiled_eval(expr, d)
                     else:
                         if "reason" not in mark.kwargs:
                             # XXX better be checked at collection time
```