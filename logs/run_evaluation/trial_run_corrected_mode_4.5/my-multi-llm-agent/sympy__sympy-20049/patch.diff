```diff
--- a/sympy/physics/vector/point.py
+++ b/sympy/physics/vector/point.py
@@ -491,6 +491,17 @@
         >>> p1.vel(N)
         10*N.x
 
+        Velocities will be automatically calculated if possible, otherwise a
+        ``ValueError`` will be returned. If it is possible to calculate
+        multiple different velocities from the relative points, the points
+        defined most directly relative to this point will be used. In the case
+        of inconsistent relative positions of points, incorrect velocities may
+        be returned. It is up to the user to define prior relative positions
+        and velocities of points in a self-consistent way.
+
+        >>> from sympy.physics.vector import Point, ReferenceFrame, dynamicsymbols
+        >>> N = ReferenceFrame('N')
+        >>> p = Point('p')
         Velocities will be automatically calculated if possible, otherwise a ``ValueError`` will be returned. If it is possible to calculate multiple different velocities from the relative points, the points defined most directly relative to this point will be used. In the case of inconsistent relative positions of points, incorrect velocities may be returned. It is up to the user to define prior relative positions and velocities of points in a self-consistent way.
 
         >>> p = Point('p')
@@ -505,7 +516,7 @@
         """
 
         _check_frame(frame)
-        if not (frame in self._vel_dict):\n+        if not (frame in self._vel_dict):
+        if not (frame in self._vel_dict):
             visited = []
             queue = [self]
 -            while queue:  # BFS to find nearest point
+            while queue: #BFS to find nearest point
                 node = queue.pop(0)
                 if node not in visited:
                     visited.append(node)
@@ -524,7 +535,7 @@
                         return self._vel_dict[frame]
             else:
                 raise ValueError('Velocity of point ' + self.name + ' has not been'\
-                             ' defined in ReferenceFrame ' + frame.name)
+                             ' defined in ReferenceFrame ' + frame.name )
 
         return self._vel_dict[frame]
 
```