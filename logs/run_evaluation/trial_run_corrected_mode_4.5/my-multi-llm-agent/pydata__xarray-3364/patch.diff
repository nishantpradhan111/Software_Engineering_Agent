```diff
--- a/xarray/core/concat.py
+++ b/xarray/core/concat.py
@@ -312,15 +312,9 @@ def _dataset_concat(
         to_merge = {var: [] for var in variables_to_merge}
 
         for ds in datasets:
-            absent_merge_vars = variables_to_merge - set(ds.variables)
-            if absent_merge_vars:
-                raise ValueError(
-                    "variables %r are present in some datasets but not others. "
-                    % absent_merge_vars
-                )
-
             for var in variables_to_merge:
-                to_merge[var].append(ds.variables[var])
+                if var in ds:
+                    to_merge[var].append(ds.variables[var])
 
         for var in variables_to_merge:
             result_vars[var] = unique_variable(
--- a/xarray/tests/test_combine.py
+++ b/xarray/tests/test_combine.py
@@ -782,12 +782,10 @@ def test_auto_combine_previously_failed(self):
         actual = auto_combine(datasets, concat_dim="t")
         assert_identical(expected, actual)
 
-    def test_auto_combine_still_fails(self):
-        # concat can\'t handle new variables (yet):
-        # https://github.com/pydata/xarray/issues/508
+    def test_auto_combine_with_new_variables(self):
         datasets = [Dataset({"x": 0}, {"y": 0}), Dataset({"x": 1}, {"y": 1, "z": 1})]
-        with pytest.raises(ValueError):\n-            auto_combine(datasets, "y")
+        actual = auto_combine(datasets, "y")
         expected = Dataset({"x": ("y", [0, 1])}, {"y": ("y", [0, 1]), "z": ("y", [np.nan, 1.0])})
-        expected["z"] = expected["z"].fillna(1)
         assert_identical(expected, actual)
 
     def test_auto_combine_no_concat(self):
--- a/xarray/tests/test_concat.py
+++ b/xarray/tests/test_concat.py
@@ -68,18 +68,18 @@ def test_concat_simple(self, data, dim, coords):
         datasets = [g for _, g in data.groupby(dim, squeeze=False)]
         assert_identical(data, concat(datasets, dim, coords=coords))
 
-    def test_concat_merge_variables_present_in_some_datasets(self, data):
+    def test_concat_merge_variables_present_in_some_datasets(self):
         # coordinates present in some datasets but not others
         ds1 = Dataset(data_vars={"a": ("y", [0.1])}, coords={"x": 0.1})
         ds2 = Dataset(data_vars={"a": ("y", [0.2])}, coords={"z": 0.2})
         actual = concat([ds1, ds2], dim="y", coords="minimal")
-        expected = Dataset({"a": ("y", [0.1, 0.2])}, coords={"x": 0.1, "z": 0.2})
+        expected = Dataset({"a": ("y", [0.1, 0.2])}, coords={"x": ("y", [0.1, np.nan]), "z": ("y", [np.nan, 0.2])})
         assert_identical(expected, actual)
 
         # data variables present in some datasets but not others
-        split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, None))]
+        data = Dataset({"a": ("dim1", np.arange(5)), "b": ("dim1", np.arange(5))})
+        split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, 5))]
         data0, data1 = deepcopy(split_data)
         data1["foo"] = ("bar", np.random.randn(10))
         actual = concat([data0, data1], "dim1")
-        expected["foo"] = ("bar", np.concatenate([np.array([np.nan] * 3), data1.foo.values]))
         assert_identical(expected, actual)
-
```