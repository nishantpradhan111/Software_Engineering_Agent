+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/axis.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 332937997d03e0c173be6d9fc1841e9186e857df
Merge: 9f96205464 96c2ca0cbe
Author: Oscar Gustafsson <oscar.gustafsson@gmail.com>
Date:   Tue Nov 8 15:00:45 2022 +0100

    Merge pull request #24329 from anntzer/ufpp
    
    Kill FontconfigPatternParser.

+ git -c core.fileMode=false diff 332937997d03e0c173be6d9fc1841e9186e857df
diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py
index af0815d41d..71755356d4 100644
--- a/lib/matplotlib/axis.py
+++ b/lib/matplotlib/axis.py
@@ -2022,6 +2022,7 @@ class Axis(martist.Artist):
         ticks.
         """
         result = self._set_tick_locations(ticks, minor=minor)
+        _api.check_keyword_only(kwargs)
         if labels is not None:
             self.set_ticklabels(labels, minor=minor, **kwargs)
         return result
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (1.1.0)
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (1.4.5)
Requirement already satisfied: numpy>=1.19 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (10.0.0)
Requirement already satisfied: pyparsing>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (2.8.2)
Requirement already satisfied: setuptools_scm>=7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev635+g332937997d.d20250511) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.7.0.dev635+g332937997d.d20250511) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=7->matplotlib==3.7.0.dev635+g332937997d.d20250511) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=7->matplotlib==3.7.0.dev635+g332937997d.d20250511) (4.7.1)
Building wheels for collected packages: matplotlib
  Building editable for matplotlib (pyproject.toml): started
  Building editable for matplotlib (pyproject.toml): still running...
  Building editable for matplotlib (pyproject.toml): still running...
  Building editable for matplotlib (pyproject.toml): finished with status 'done'
  Created wheel for matplotlib: filename=matplotlib-3.7.0.dev635+g332937997d.d20250511-0.editable-cp311-cp311-linux_x86_64.whl size=24125 sha256=6c635de4eda608212eedc6d8a2545df5d07112ce07cea730ca6e318007aaeb33
  Stored in directory: /tmp/pip-ephem-wheel-cache-80froiv1/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b
Successfully built matplotlib
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.7.0.dev635+g332937997d
    Uninstalling matplotlib-3.7.0.dev635+g332937997d:
      Successfully uninstalled matplotlib-3.7.0.dev635+g332937997d
Successfully installed matplotlib-3.7.0.dev635+g332937997d.d20250511
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 332937997d03e0c173be6d9fc1841e9186e857df lib/matplotlib/tests/test_axes.py
Updated 0 paths from a2ca791881
+ git apply -v -
Checking patch lib/matplotlib/tests/test_axes.py...
Applied patch lib/matplotlib/tests/test_axes.py cleanly.
+ : '>>>>> Start Test Output'
+ pytest -rA lib/matplotlib/tests/test_axes.py
============================= test session starts ==============================
platform linux -- Python 3.11.11, pytest-8.3.4, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: xdist-3.6.1, cov-6.0.0, timeout-2.3.1, rerunfailures-15.0
collected 835 items

lib/matplotlib/tests/test_axes.py ...FFFFFFFFF.......s....s...........s. [  4%]
.....s..........s......s..s...F.....s.....s..s...s........s..s..s.....s. [ 13%]
............s...s...s..s..s..s..s..s..s..sF..FF......F........s........s [ 21%]
................................sFFs..s..s...s.......................... [ 30%]
...............................................s..s..................... [ 39%]
.........s......s................................s....s...s.......s..... [ 47%]
.s..s....s.........s..s..s...........s.....s..s..s....s..s.............. [ 56%]
.......s..s..s..s..s.........s..s.......F.F..........................FFF [ 64%]
FF.FFF.FFFFFFFF.F....................................................... [ 73%]
....................................s................................... [ 82%]
...................................................................F.... [ 90%]
................................F..........s............................ [ 99%]
.....                                                                    [100%]

=================================== FAILURES ===================================
_________________________ test_label_loc_vertical[png] _________________________

ext = 'png'
request = <FixtureRequest for <Function test_label_loc_vertical[png]>>
args = (), kwargs = {}, file_name = 'test_label_loc_vertical[png]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:80: in test_label_loc_vertical
    cbar = fig_test.colorbar(sc)
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb65ccbc90>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_________________________ test_label_loc_vertical[pdf] _________________________

ext = 'pdf'
request = <FixtureRequest for <Function test_label_loc_vertical[pdf]>>
args = (), kwargs = {}, file_name = 'test_label_loc_vertical[pdf]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:80: in test_label_loc_vertical
    cbar = fig_test.colorbar(sc)
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb66de3c90>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_________________________ test_label_loc_vertical[svg] _________________________

ext = 'svg'
request = <FixtureRequest for <Function test_label_loc_vertical[svg]>>
args = (), kwargs = {}, file_name = 'test_label_loc_vertical[svg]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:80: in test_label_loc_vertical
    cbar = fig_test.colorbar(sc)
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb65cf3c90>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
________________________ test_label_loc_horizontal[png] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_label_loc_horizontal[png]>>
args = (), kwargs = {}, file_name = 'test_label_loc_horizontal[png]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:99: in test_label_loc_horizontal
    cbar = fig_test.colorbar(sc, orientation='horizontal')
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb64241d10>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
________________________ test_label_loc_horizontal[pdf] ________________________

ext = 'pdf'
request = <FixtureRequest for <Function test_label_loc_horizontal[pdf]>>
args = (), kwargs = {}, file_name = 'test_label_loc_horizontal[pdf]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:99: in test_label_loc_horizontal
    cbar = fig_test.colorbar(sc, orientation='horizontal')
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb65cf2ed0>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
________________________ test_label_loc_horizontal[svg] ________________________

ext = 'svg'
request = <FixtureRequest for <Function test_label_loc_horizontal[svg]>>
args = (), kwargs = {}, file_name = 'test_label_loc_horizontal[svg]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:99: in test_label_loc_horizontal
    cbar = fig_test.colorbar(sc, orientation='horizontal')
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb65af1990>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
____________________________ test_label_loc_rc[png] ____________________________

ext = 'png', request = <FixtureRequest for <Function test_label_loc_rc[png]>>
args = (), kwargs = {}, file_name = 'test_label_loc_rc[png]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:120: in test_label_loc_rc
    cbar = fig_test.colorbar(sc, orientation='horizontal')
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb5de0e890>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
____________________________ test_label_loc_rc[pdf] ____________________________

ext = 'pdf', request = <FixtureRequest for <Function test_label_loc_rc[pdf]>>
args = (), kwargs = {}, file_name = 'test_label_loc_rc[pdf]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:120: in test_label_loc_rc
    cbar = fig_test.colorbar(sc, orientation='horizontal')
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb65b49d10>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
____________________________ test_label_loc_rc[svg] ____________________________

ext = 'svg', request = <FixtureRequest for <Function test_label_loc_rc[svg]>>
args = (), kwargs = {}, file_name = 'test_label_loc_rc[svg]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:120: in test_label_loc_rc
    cbar = fig_test.colorbar(sc, orientation='horizontal')
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb6798e4d0>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_____________________________ test_hexbin_log[png] _____________________________

    @image_comparison(['hexbin_log.png'], style='mpl20')
    def test_hexbin_log():
        # Issue #1636 (and also test log scaled colorbar)
    
        # Remove this line when this test image is regenerated.
        plt.rcParams['pcolormesh.snap'] = False
    
        np.random.seed(19680801)
        n = 100000
        x = np.random.standard_normal(n)
        y = 2.0 + 3.0 * x + 4.0 * np.random.standard_normal(n)
        y = np.power(2, y * 0.5)
    
        fig, ax = plt.subplots()
        h = ax.hexbin(x, y, yscale='log', bins='log',
                      marginals=True, reduce_C_function=np.sum)
>       plt.colorbar(h)

lib/matplotlib/tests/test_axes.py:936: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2072: in colorbar
    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kwargs)
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5dbabc90>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_______________________ test_bar_tick_label_single[png] ________________________

    @image_comparison(['bar_tick_label_single.png', 'bar_tick_label_single.png'])
    def test_bar_tick_label_single():
        # From 2516: plot bar with array of string labels for x axis
        ax = plt.gca()
>       ax.bar(0, 1, align='edge', tick_label='0')

lib/matplotlib/tests/test_axes.py:1706: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2504: in bar
    tick_label_axis.set_ticks(tick_label_position)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb6622bc90>, ticks = array([0])
labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb5ce53810>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
______________________ test_bar_tick_label_multiple[png] _______________________

    @image_comparison(['bar_tick_label_multiple.png'])
    def test_bar_tick_label_multiple():
        # From 2516: plot bar with array of string labels for x axis
        ax = plt.gca()
>       ax.bar([1, 2.5], [1, 2], width=[0.2, 0.5], tick_label=['a', 'b'],
               align='center')

lib/matplotlib/tests/test_axes.py:1729: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2504: in bar
    tick_label_axis.set_ticks(tick_label_position)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb65f38190>
ticks = array([1. , 2.5]), labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb64447cd0>, <matplotlib.axis.XTick object at 0x7fbb5ccc08d0>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_______________ test_bar_tick_label_multiple_old_alignment[png] ________________

    @image_comparison(['bar_tick_label_multiple_old_label_alignment.png'])
    def test_bar_tick_label_multiple_old_alignment():
        # Test that the alignment for class is backward compatible
        matplotlib.rcParams["ytick.alignment"] = "center"
        ax = plt.gca()
>       ax.bar([1, 2.5], [1, 2], width=[0.2, 0.5], tick_label=['a', 'b'],
               align='center')

lib/matplotlib/tests/test_axes.py:1738: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2504: in bar
    tick_label_axis.set_ticks(tick_label_position)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5d3dd990>
ticks = array([1. , 2.5]), labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb66dce110>, <matplotlib.axis.XTick object at 0x7fbb65d4cc90>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
__________________________ test_barh_tick_label[png] ___________________________

    @image_comparison(['barh_tick_label.png'])
    def test_barh_tick_label():
        # From 2516: plot barh with array of string labels for y axis
        ax = plt.gca()
>       ax.barh([1, 2.5], [1, 2], height=[0.2, 0.5], tick_label=['a', 'b'],
                align='center')

lib/matplotlib/tests/test_axes.py:1818: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2623: in barh
    patches = self.bar(x=left, height=height, width=width, bottom=y,
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2504: in bar
    tick_label_axis.set_ticks(tick_label_position)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb65f5be50>
ticks = array([1. , 2.5]), labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.YTick object at 0x7fbb5d35c410>, <matplotlib.axis.YTick object at 0x7fbb5d0ff590>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
__________________________ test_contour_colorbar[png] __________________________

    @image_comparison(['contour_colorbar'], style='mpl20')
    def test_contour_colorbar():
        x, y, z = contour_dat()
    
        fig, ax = plt.subplots()
        cs = ax.contourf(x, y, z, levels=np.arange(-1.8, 1.801, 0.2),
                         cmap=mpl.colormaps['RdBu'],
                         vmin=-0.6,
                         vmax=0.6,
                         extend='both')
        cs1 = ax.contour(x, y, z, levels=np.arange(-2.2, -0.599, 0.2),
                         colors=['y'],
                         linestyles='solid',
                         linewidths=2)
        cs2 = ax.contour(x, y, z, levels=np.arange(0.6, 2.2, 0.2),
                         colors=['c'],
                         linewidths=2)
>       cbar = fig.colorbar(cs, ax=ax)

lib/matplotlib/tests/test_axes.py:2360: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5ddfb610>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
__________________________ test_contour_colorbar[pdf] __________________________

    @image_comparison(['contour_colorbar'], style='mpl20')
    def test_contour_colorbar():
        x, y, z = contour_dat()
    
        fig, ax = plt.subplots()
        cs = ax.contourf(x, y, z, levels=np.arange(-1.8, 1.801, 0.2),
                         cmap=mpl.colormaps['RdBu'],
                         vmin=-0.6,
                         vmax=0.6,
                         extend='both')
        cs1 = ax.contour(x, y, z, levels=np.arange(-2.2, -0.599, 0.2),
                         colors=['y'],
                         linestyles='solid',
                         linewidths=2)
        cs2 = ax.contour(x, y, z, levels=np.arange(0.6, 2.2, 0.2),
                         colors=['c'],
                         linewidths=2)
>       cbar = fig.colorbar(cs, ax=ax)

lib/matplotlib/tests/test_axes.py:2360: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:1273: in colorbar
    cb = cbar.Colorbar(cax, mappable, **cb_kw)
lib/matplotlib/_api/deprecation.py:384: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/colorbar.py:420: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:544: in _draw_all
    self._short_axis().set_ticks([])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb66158190>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
______________________________ test_psd_csd[png] _______________________________

    @image_comparison(
        ["psd_freqs.png", "csd_freqs.png", "psd_noise.png", "csd_noise.png"],
        remove_text=True, tol=0.002)
    def test_psd_csd():
        n = 10000
        Fs = 100.
    
        fstims = [[Fs/4, Fs/5, Fs/11], [Fs/4.7, Fs/5.6, Fs/11.9]]
        NFFT_freqs = int(1000 * Fs / np.min(fstims))
        x = np.arange(0, n, 1/Fs)
        ys_freqs = np.sin(2 * np.pi * np.multiply.outer(fstims, x)).sum(axis=1)
    
        NFFT_noise = int(1000 * Fs / 11)
        np.random.seed(0)
        ys_noise = [np.random.standard_normal(n), np.random.rand(n)]
    
        all_kwargs = [{"sides": "default"},
                      {"sides": "onesided", "return_line": False},
                      {"sides": "twosided", "return_line": True}]
        for ys, NFFT in [(ys_freqs, NFFT_freqs), (ys_noise, NFFT_noise)]:
            noverlap = NFFT // 2
            pad_to = int(2 ** np.ceil(np.log2(NFFT)))
            for ax, kwargs in zip(plt.figure().subplots(3), all_kwargs):
>               ret = ax.psd(np.concatenate(ys), NFFT=NFFT, Fs=Fs,
                             noverlap=noverlap, pad_to=pad_to, **kwargs)

lib/matplotlib/tests/test_axes.py:5125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7222: in psd
    self.set_yticks(ticks)
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb65e69cd0>
ticks = array([-100,  -80,  -60,  -40,  -20,    0,   20]), labels = None
minor = False, kwargs = {}
result = [<matplotlib.axis.YTick object at 0x7fbb65f2a8d0>, <matplotlib.axis.YTick object at 0x7fbb5dcc8590>, <matplotlib.axis....7fbb5de6e9d0>, <matplotlib.axis.YTick object at 0x7fbb5de6e690>, <matplotlib.axis.YTick object at 0x7fbb5d49b390>, ...]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
___________________________ test_psd_csd_edge_cases ____________________________

    def test_psd_csd_edge_cases():
        # Inverted yaxis or fully zero inputs used to throw exceptions.
        axs = plt.figure().subplots(2)
        for ax in axs:
            ax.yaxis.set(inverted=True)
        with np.errstate(divide="ignore"):
>           axs[0].psd(np.zeros(5))

lib/matplotlib/tests/test_axes.py:5184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7222: in psd
    self.set_yticks(ticks)
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.YAxis object at 0x7fbb66de35d0>, ticks = array([0, 1])
labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.YTick object at 0x7fbb663a6dd0>, <matplotlib.axis.YTick object at 0x7fbb5dc44610>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
____________________________ test_pie_default[png] _____________________________

    @image_comparison(['pie_default.png'])
    def test_pie_default():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
        fig1, ax1 = plt.subplots(figsize=(8, 6))
>       ax1.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90)

lib/matplotlib/tests/test_axes.py:5528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb6456b050>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
__________________________ test_pie_linewidth_0[png] ___________________________

    @image_comparison(['pie_linewidth_0', 'pie_linewidth_0', 'pie_linewidth_0'],
                      extensions=['png'], style='mpl20')
    def test_pie_linewidth_0():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 0})

lib/matplotlib/tests/test_axes.py:5541: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2734: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5d104490>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_________________________ test_pie_center_radius[png] __________________________

    @image_comparison(['pie_center_radius.png'], style='mpl20')
    def test_pie_center_radius():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 0}, center=(1, 2), radius=1.5)

lib/matplotlib/tests/test_axes.py:5573: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2734: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5dc26290>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
__________________________ test_pie_linewidth_2[png] ___________________________

    @image_comparison(['pie_linewidth_2.png'], style='mpl20')
    def test_pie_linewidth_2():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 2})

lib/matplotlib/tests/test_axes.py:5593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2734: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5cd6c650>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
____________________________ test_pie_ccw_true[png] ____________________________

    @image_comparison(['pie_ccw_true.png'], style='mpl20')
    def test_pie_ccw_true():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                counterclock=True)

lib/matplotlib/tests/test_axes.py:5608: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2734: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb647133d0>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_______________________ test_pie_rotatelabels_true[png] ________________________

    @image_comparison(['pie_rotatelabels_true.png'], style='mpl20')
    def test_pie_rotatelabels_true():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Hogwarts', 'Frogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                rotatelabels=True)

lib/matplotlib/tests/test_axes.py:5650: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2734: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5cdabc90>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_______________________ test_pie_nolabel_but_legend[png] _______________________

    @image_comparison(['pie_no_label.png'])
    def test_pie_nolabel_but_legend():
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90, labeldistance=None,
                rotatelabels=True)

lib/matplotlib/tests/test_axes.py:5663: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2734: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5cad5690>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
______________________________ test_pie_textprops ______________________________

    def test_pie_textprops():
        data = [23, 34, 45]
        labels = ["Long name 1", "Long name 2", "Long name 3"]
    
        textprops = dict(horizontalalignment="center",
                         verticalalignment="top",
                         rotation=90,
                         rotation_mode="anchor",
                         size=12, color="red")
    
>       _, texts, autopct = plt.gca().pie(data, labels=labels, autopct='%.2f',
                                          textprops=textprops)

lib/matplotlib/tests/test_axes.py:5681: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb65b81990>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
___________________________ test_normalize_kwarg_pie ___________________________

    def test_normalize_kwarg_pie():
        fig, ax = plt.subplots()
        x = [0.3, 0.3, 0.1]
>       t1 = ax.pie(x=x, normalize=True)

lib/matplotlib/tests/test_axes.py:5703: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1448: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3271: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:117: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1194: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1186: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1162: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb4fc34910>, ticks = []
labels = None, minor = False, kwargs = {}, result = []

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_________________________ test_set_get_ticklabels[png] _________________________

    @image_comparison(['set_get_ticklabels.png'])
    def test_set_get_ticklabels():
        # test issue 2246
        fig, ax = plt.subplots(2)
        ha = ['normal', 'set_x/yticklabels']
    
        ax[0].plot(np.arange(10))
        ax[0].set_title(ha[0])
    
        ax[1].plot(np.arange(10))
        ax[1].set_title(ha[1])
    
        # set ticklabel to 1 plot in normal way
>       ax[0].set_xticks(range(10))

lib/matplotlib/tests/test_axes.py:5722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb64682a50>, ticks = range(0, 10)
labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb5ce3e890>, <matplotlib.axis.XTick object at 0x7fbb6616b690>, <matplotlib.axis....7fbb64769c50>, <matplotlib.axis.XTick object at 0x7fbb64769950>, <matplotlib.axis.XTick object at 0x7fbb668825d0>, ...]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_______________ test_set_ticks_kwargs_raise_error_without_labels _______________

    def test_set_ticks_kwargs_raise_error_without_labels():
        """
        When labels=None and any kwarg is passed, axis.set_ticks() raises a
        ValueError.
        """
        fig, ax = plt.subplots()
        ticks = [1, 2, 3]
        with pytest.raises(ValueError):
>           ax.xaxis.set_ticks(ticks, alpha=0.5)

lib/matplotlib/tests/test_axes.py:5743: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb66e24bd0>, ticks = [1, 2, 3]
labels = None, minor = False, kwargs = {'alpha': 0.5}
result = [<matplotlib.axis.XTick object at 0x7fbb66717b90>, <matplotlib.axis.XTick object at 0x7fbb66714950>, <matplotlib.axis.XTick object at 0x7fbb6657e010>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_______________________ test_set_ticks_with_labels[png] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_set_ticks_with_labels[png]>>
args = (), kwargs = {}, file_name = 'test_set_ticks_with_labels[png]'
fig_test = <Figure size 640x480 with 0 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:5756: in test_set_ticks_with_labels
    ax.set_xticks([1, 2, 4, 6])
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb64593890>, ticks = [1, 2, 4, 6]
labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb5dd82890>, <matplotlib.axis.XTick object at 0x7fbb65fdb510>, <matplotlib.axis.XTick object at 0x7fbb5cdaba10>, <matplotlib.axis.XTick object at 0x7fbb66953a50>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
_______________________ test_set_noniterable_ticklabels ________________________

    def test_set_noniterable_ticklabels():
        # Ensure a useful TypeError message is raised
        # when given a non-iterable ticklabels argument
        # Pull request #22710
        with pytest.raises(TypeError, match='must be a sequence'):
            fig, ax = plt.subplots(2)
>           ax[1].set_xticks([2, 9], 3.1)

lib/matplotlib/tests/test_axes.py:5774: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb664fbbd0>, ticks = [2, 9]
labels = 3.1, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb5dedd9d0>, <matplotlib.axis.XTick object at 0x7fbb65e5e690>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
__________________________ test_subsampled_ticklabels __________________________

    def test_subsampled_ticklabels():
        # test issue 11937
        fig, ax = plt.subplots()
        ax.plot(np.arange(10))
>       ax.xaxis.set_ticks(np.arange(10) + 0.1)

lib/matplotlib/tests/test_axes.py:5781: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb4fc090d0>
ticks = array([0.1, 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1]), labels = None
minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb66176110>, <matplotlib.axis.XTick object at 0x7fbb65e6aa10>, <matplotlib.axis....7fbb5ce532d0>, <matplotlib.axis.XTick object at 0x7fbb5ce53fd0>, <matplotlib.axis.XTick object at 0x7fbb6456c250>, ...]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
__________________________ test_mismatched_ticklabels __________________________

    def test_mismatched_ticklabels():
        fig, ax = plt.subplots()
        ax.plot(np.arange(10))
>       ax.xaxis.set_ticks([1.5, 2.5])

lib/matplotlib/tests/test_axes.py:5792: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb4fc3f750>, ticks = [1.5, 2.5]
labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb65dfcdd0>, <matplotlib.axis.XTick object at 0x7fbb669bb350>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
__________________________ test_empty_ticks_fixed_loc __________________________

    def test_empty_ticks_fixed_loc():
        # Smoke test that [] can be used to unset all tick labels
        fig, ax = plt.subplots()
        ax.bar([1, 2], [1, 2])
>       ax.set_xticks([1, 2])

lib/matplotlib/tests/test_axes.py:5801: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5d104c10>, ticks = [1, 2]
labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb66db2750>, <matplotlib.axis.XTick object at 0x7fbb5d4b6010>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
____________________________ test_tick_label_update ____________________________

    def test_tick_label_update():
        # test issue 9397
    
        fig, ax = plt.subplots()
    
        # Set up a dummy formatter
        def formatter_func(x, pos):
            return "unit value" if x == 1 else ""
        ax.xaxis.set_major_formatter(plt.FuncFormatter(formatter_func))
    
        # Force some of the x-axis ticks to be outside of the drawn range
>       ax.set_xticks([-1, 0, 1, 2, 3])

lib/matplotlib/tests/test_axes.py:5824: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb646dc310>
ticks = [-1, 0, 1, 2, 3], labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb5cd76510>, <matplotlib.axis.XTick object at 0x7fbb5d168350>, <matplotlib.axis....at 0x7fbb5ddc7d50>, <matplotlib.axis.XTick object at 0x7fbb5db17890>, <matplotlib.axis.XTick object at 0x7fbb64473210>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
___________________________ test_set_ticks_inverted ____________________________

    def test_set_ticks_inverted():
        fig, ax = plt.subplots()
        ax.invert_xaxis()
>       ax.set_xticks([.3, .7])

lib/matplotlib/tests/test_axes.py:7466: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb6452f090>, ticks = [0.3, 0.7]
labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb66385110>, <matplotlib.axis.XTick object at 0x7fbb66386050>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
___________________________ test_shared_axes_retick ____________________________

    def test_shared_axes_retick():
        fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')
    
        for ax in axs.flat:
            ax.plot([0, 2], 'o-')
    
>       axs[0, 0].set_xticks([-0.5, 0, 1, 1.5])  # should affect all axes xlims

lib/matplotlib/tests/test_axes.py:7736: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:74: in wrapper
    return get_method(self)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.axis.XAxis object at 0x7fbb5cd1d490>
ticks = [-0.5, 0, 1, 1.5], labels = None, minor = False, kwargs = {}
result = [<matplotlib.axis.XTick object at 0x7fbb65bc4250>, <matplotlib.axis.XTick object at 0x7fbb5cd760d0>, <matplotlib.axis.XTick object at 0x7fbb5ceb2110>, <matplotlib.axis.XTick object at 0x7fbb66857d50>]

    def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):
        """
        Set this Axis' tick locations and optionally labels.
    
        If necessary, the view limits of the Axis are expanded so that all
        given ticks are visible.
    
        Parameters
        ----------
        ticks : list of floats
            List of tick locations.  The axis `.Locator` is replaced by a
            `~.ticker.FixedLocator`.
    
            Some tick formatters will not label arbitrary tick positions;
            e.g. log formatters only label decade ticks by default. In
            such a case you can set a formatter explicitly on the axis
            using `.Axis.set_major_formatter` or provide formatted
            *labels* yourself.
        labels : list of str, optional
            List of tick labels. If not set, the labels are generated with
            the axis tick `.Formatter`.
        minor : bool, default: False
            If ``False``, set the major ticks; if ``True``, the minor ticks.
        **kwargs
            `.Text` properties for the labels. These take effect only if you
            pass *labels*. In other cases, please use `~.Axes.tick_params`.
    
        Notes
        -----
        The mandatory expansion of the view limits is an intentional design
        choice to prevent the surprise of a non-visible tick. If you need
        other limits, you should set the limits explicitly after setting the
        ticks.
        """
        result = self._set_tick_locations(ticks, minor=minor)
>       _api.check_keyword_only(kwargs)
E       AttributeError: module 'matplotlib._api' has no attribute 'check_keyword_only'

lib/matplotlib/axis.py:2025: AttributeError
==================================== PASSES ====================================
___________________ TestScatter.test_scatter_c[c_case9-None] ___________________
------------------------------ Captured log call -------------------------------
WARNING  matplotlib.axes._axes:_axes.py:4397 *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.
__________________________ test_color_length_mismatch __________________________
------------------------------ Captured log call -------------------------------
WARNING  matplotlib.axes._axes:_axes.py:4397 *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.
____________________________ test_2dcolor_plot[pdf] ____________________________
------------------------------ Captured log call -------------------------------
WARNING  matplotlib.axes._axes:_axes.py:4397 *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.
=========================== short test summary info ============================
PASSED lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]
PASSED lib/matplotlib/tests/test_axes.py::test_get_labels
PASSED lib/matplotlib/tests/test_axes.py::test_repr
PASSED lib/matplotlib/tests/test_axes.py::test_label_shift
PASSED lib/matplotlib/tests/test_axes.py::test_acorr[png]
PASSED lib/matplotlib/tests/test_axes.py::test_spy[png]
PASSED lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs
PASSED lib/matplotlib/tests/test_axes.py::test_matshow[png]
PASSED lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]
PASSED lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter
PASSED lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter
PASSED lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_twinx_cla
PASSED lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]
PASSED lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting
PASSED lib/matplotlib/tests/test_axes.py::test_inverted_cla
PASSED lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla
PASSED lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally
PASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]
PASSED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]
PASSED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_autoscale_tight
PASSED lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared
PASSED lib/matplotlib/tests/test_axes.py::test_use_sticky_edges
PASSED lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]
PASSED lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]
PASSED lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]
PASSED lib/matplotlib/tests/test_axes.py::test_arrow_empty
PASSED lib/matplotlib/tests/test_axes.py::test_arrow_in_view
PASSED lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow
PASSED lib/matplotlib/tests/test_axes.py::test_annotate_signature
PASSED lib/matplotlib/tests/test_axes.py::test_fill_units[png]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]
PASSED lib/matplotlib/tests/test_axes.py::test_single_point[png]
PASSED lib/matplotlib/tests/test_axes.py::test_single_point[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_single_date[png]
PASSED lib/matplotlib/tests/test_axes.py::test_shaped_data[png]
PASSED lib/matplotlib/tests/test_axes.py::test_structured_data
PASSED lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hexbin_pickable
PASSED lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim
PASSED lib/matplotlib/tests/test_axes.py::test_inverted_limits
PASSED lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]
PASSED lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]
PASSED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]
PASSED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]
PASSED lib/matplotlib/tests/test_axes.py::test_imshow[png]
PASSED lib/matplotlib/tests/test_axes.py::test_imshow[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]
PASSED lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax
PASSED lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]
PASSED lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_symlog[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205
PASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorargs
PASSED lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorflaterror
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]
PASSED lib/matplotlib/tests/test_axes.py::test_canonical[png]
PASSED lib/matplotlib/tests/test_axes.py::test_canonical[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_arc_angles[png]
PASSED lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]
PASSED lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle
PASSED lib/matplotlib/tests/test_axes.py::test_markevery[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_line[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_marker_edges[png]
PASSED lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_nan_bar_values
PASSED lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail
PASSED lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]
PASSED lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]
PASSED lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha
PASSED lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha
PASSED lib/matplotlib/tests/test_axes.py::test_bar_timedelta
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths
PASSED lib/matplotlib/tests/test_axes.py::test_pcolor_regression
PASSED lib/matplotlib/tests/test_axes.py::test_bar_pandas
PASSED lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed
PASSED lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_labels_length
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot
PASSED lib/matplotlib/tests/test_axes.py::test_hist_log[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked
PASSED lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_float16
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_density[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density
PASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets
PASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]
PASSED lib/matplotlib/tests/test_axes.py::test_stairs[png]
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_update[png]
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_empty
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_options[png]
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]
PASSED lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]
PASSED lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist2d[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist2d_density
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error
PASSED lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api
PASSED lib/matplotlib/tests/test_axes.py::test_pyplot_axes
PASSED lib/matplotlib/tests/test_axes.py::test_log_scales
PASSED lib/matplotlib/tests/test_axes.py::test_log_scales_no_data
PASSED lib/matplotlib/tests/test_axes.py::test_log_scales_invalid
PASSED lib/matplotlib/tests/test_axes.py::test_stackplot[png]
PASSED lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]
PASSED lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot[png]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_zorder
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]
PASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]
PASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]
PASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]
PASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]
PASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]
PASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]
PASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]
PASSED lib/matplotlib/tests/test_axes.py::test_manage_xticks
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_not_single
PASSED lib/matplotlib/tests/test_axes.py::test_tick_space_size_0
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar[png]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_shape
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid
PASSED lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_offset[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_stem[png-w/ line collection]
PASSED lib/matplotlib/tests/test_axes.py::test_stem[png-w/o line collection]
PASSED lib/matplotlib/tests/test_axes.py::test_stem_args
PASSED lib/matplotlib/tests/test_axes.py::test_stem_markerfmt
PASSED lib/matplotlib/tests/test_axes.py::test_stem_dates
PASSED lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/ line collection]
PASSED lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o line collection]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged
PASSED lib/matplotlib/tests/test_axes.py::test_hist_emptydata
PASSED lib/matplotlib/tests/test_axes.py::test_hist_labels
PASSED lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]
PASSED lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]
PASSED lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]
PASSED lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure
PASSED lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure
PASSED lib/matplotlib/tests/test_axes.py::test_alpha[png]
PASSED lib/matplotlib/tests/test_axes.py::test_alpha[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot[png]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]
PASSED lib/matplotlib/tests/test_axes.py::test_empty_eventplot
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]
PASSED lib/matplotlib/tests/test_axes.py::test_marker_styles[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]
PASSED lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]
PASSED lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_axline[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axline[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_args
PASSED lib/matplotlib/tests/test_axes.py::test_vlines[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vlines_default
PASSED lib/matplotlib/tests/test_axes.py::test_hlines[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hlines_default
PASSED lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]
PASSED lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]
PASSED lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]
PASSED lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]
PASSED lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_subplot_key_hash
PASSED lib/matplotlib/tests/test_axes.py::test_specgram[png]
PASSED lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]
PASSED lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]
PASSED lib/matplotlib/tests/test_axes.py::test_specgram_fs_none
PASSED lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]
PASSED lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg
PASSED lib/matplotlib/tests/test_axes.py::test_spectrum[png]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_remove[png]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_spines[png]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]
PASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]
PASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]
PASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]
PASSED lib/matplotlib/tests/test_axes.py::test_grid
PASSED lib/matplotlib/tests/test_axes.py::test_reset_grid
PASSED lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]
PASSED lib/matplotlib/tests/test_axes.py::test_vline_limit
PASSED lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]
PASSED lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots
PASSED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1
PASSED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2
PASSED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3
PASSED lib/matplotlib/tests/test_axes.py::test_shared_aspect_error
PASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\(\\) takes 0 or 1 positional arguments but 2 were given]
PASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized string 'foo' to axis; try 'on' or 'off']
PASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the first argument to axis*]
PASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\(\\) got an unexpected keyword argument 'foo']
PASSED lib/matplotlib/tests/test_axes.py::test_axis_method_errors
PASSED lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]
PASSED lib/matplotlib/tests/test_axes.py::test_relim_visible_only
PASSED lib/matplotlib/tests/test_axes.py::test_text_labelsize
PASSED lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]
PASSED lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values
PASSED lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]
PASSED lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]
PASSED lib/matplotlib/tests/test_axes.py::test_margins
PASSED lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin must be greater than -0\\.5]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin must be greater than -0\\.5]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin must be greater than -0\\.5]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin must be greater than -0\\.5]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot pass both positional and keyword arguments for x and/or y]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot pass both positional and keyword arguments for x and/or y]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must pass a single positional argument]
PASSED lib/matplotlib/tests/test_axes.py::test_length_one_hist
PASSED lib/matplotlib/tests/test_axes.py::test_set_xy_bound
PASSED lib/matplotlib/tests/test_axes.py::test_pathological_hexbin
PASSED lib/matplotlib/tests/test_axes.py::test_color_None
PASSED lib/matplotlib/tests/test_axes.py::test_color_alias
PASSED lib/matplotlib/tests/test_axes.py::test_numerical_hist_label
PASSED lib/matplotlib/tests/test_axes.py::test_unicode_hist_label
PASSED lib/matplotlib/tests/test_axes.py::test_move_offsetlabel
PASSED lib/matplotlib/tests/test_axes.py::test_rc_spines[png]
PASSED lib/matplotlib/tests/test_axes.py::test_rc_grid[png]
PASSED lib/matplotlib/tests/test_axes.py::test_rc_tick
PASSED lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick
PASSED lib/matplotlib/tests/test_axes.py::test_square_plot
PASSED lib/matplotlib/tests/test_axes.py::test_bad_plot_args
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]
PASSED lib/matplotlib/tests/test_axes.py::test_shared_scale
PASSED lib/matplotlib/tests/test_axes.py::test_shared_bool
PASSED lib/matplotlib/tests/test_axes.py::test_violin_point_mass
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]
PASSED lib/matplotlib/tests/test_axes.py::test_dash_offset[png]
PASSED lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_title_pad
PASSED lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip
PASSED lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]
PASSED lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]
PASSED lib/matplotlib/tests/test_axes.py::test_loglog[png]
PASSED lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axes_margins
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim
PASSED lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale
PASSED lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect
PASSED lib/matplotlib/tests/test_axes.py::test_auto_numticks
PASSED lib/matplotlib/tests/test_axes.py::test_auto_numticks_log
PASSED lib/matplotlib/tests/test_axes.py::test_broken_barh_empty
PASSED lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_index_shape
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center
PASSED lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor
PASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines
PASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside
PASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside
PASSED lib/matplotlib/tests/test_axes.py::test_none_kwargs
PASSED lib/matplotlib/tests/test_axes.py::test_bar_uint8
PASSED lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]
PASSED lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]
PASSED lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axisbelow[png]
PASSED lib/matplotlib/tests/test_axes.py::test_titletwiny
PASSED lib/matplotlib/tests/test_axes.py::test_titlesetpos
PASSED lib/matplotlib/tests/test_axes.py::test_title_xticks_top
PASSED lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both
PASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[left title moved]
PASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[center title kept]
PASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[both titles aligned]
PASSED lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page
PASSED lib/matplotlib/tests/test_axes.py::test_offset_label_color
PASSED lib/matplotlib/tests/test_axes.py::test_offset_text_visible
PASSED lib/matplotlib/tests/test_axes.py::test_large_offset
PASSED lib/matplotlib/tests/test_axes.py::test_barb_units
PASSED lib/matplotlib/tests/test_axes.py::test_quiver_units
PASSED lib/matplotlib/tests/test_axes.py::test_bar_color_cycle
PASSED lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation
PASSED lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle
PASSED lib/matplotlib/tests/test_axes.py::test_log_margins
PASSED lib/matplotlib/tests/test_axes.py::test_color_length_mismatch
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_legend
PASSED lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args
PASSED lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits
PASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]
PASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]
PASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]
PASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]
PASSED lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits
PASSED lib/matplotlib/tests/test_axes.py::test_zero_linewidth
PASSED lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend
PASSED lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]
PASSED lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]
PASSED lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox
PASSED lib/matplotlib/tests/test_axes.py::test_inset
PASSED lib/matplotlib/tests/test_axes.py::test_zoom_inset
PASSED lib/matplotlib/tests/test_axes.py::test_inset_polar[png]
PASSED lib/matplotlib/tests/test_axes.py::test_inset_projection
PASSED lib/matplotlib/tests/test_axes.py::test_inset_subclass
PASSED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]
PASSED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]
PASSED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]
PASSED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]
PASSED lib/matplotlib/tests/test_axes.py::test_set_position
PASSED lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom
PASSED lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan
PASSED lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index
PASSED lib/matplotlib/tests/test_axes.py::test_scatter_empty_data
PASSED lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]
PASSED lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]
PASSED lib/matplotlib/tests/test_axes.py::test_secondary_fail
PASSED lib/matplotlib/tests/test_axes.py::test_secondary_resize
PASSED lib/matplotlib/tests/test_axes.py::test_secondary_minorloc
PASSED lib/matplotlib/tests/test_axes.py::test_secondary_formatter
PASSED lib/matplotlib/tests/test_axes.py::test_secondary_repr
PASSED lib/matplotlib/tests/test_axes.py::test_normal_axes
PASSED lib/matplotlib/tests/test_axes.py::test_nodecorator
PASSED lib/matplotlib/tests/test_axes.py::test_displaced_spine
PASSED lib/matplotlib/tests/test_axes.py::test_tickdirs
PASSED lib/matplotlib/tests/test_axes.py::test_minor_accountedfor
PASSED lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axis_extent_arg
PASSED lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2
PASSED lib/matplotlib/tests/test_axes.py::test_hist_auto_bins
PASSED lib/matplotlib/tests/test_axes.py::test_hist_nan_data
PASSED lib/matplotlib/tests/test_axes.py::test_hist_range_and_density
PASSED lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder
PASSED lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box
PASSED lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim
PASSED lib/matplotlib/tests/test_axes.py::test_box_aspect
PASSED lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position
PASSED lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init
PASSED lib/matplotlib/tests/test_axes.py::test_set_aspect_negative
PASSED lib/matplotlib/tests/test_axes.py::test_redraw_in_frame
PASSED lib/matplotlib/tests/test_axes.py::test_invisible_axes_events
PASSED lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor
PASSED lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor
PASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]
PASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]
PASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]
PASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]
PASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]
PASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]
PASSED lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]
PASSED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky
PASSED lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor
PASSED lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]
PASSED lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale
PASSED lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions
PASSED lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]
PASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]
PASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]
PASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_center
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_labels
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata
PASSED lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted
PASSED lib/matplotlib/tests/test_axes.py::test_nan_barlabels
PASSED lib/matplotlib/tests/test_axes.py::test_patch_bounds
PASSED lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs
PASSED lib/matplotlib/tests/test_axes.py::test_artist_sublists
PASSED lib/matplotlib/tests/test_axes.py::test_empty_line_plots
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f' is not a valid format string \\(unrecognized character 'f'\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\+' is not a valid format string \\(two marker symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-' is not a valid format string \\(two linestyle symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk' is not a valid format string \\(two color symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r' is not a valid format string \\(two linestyle symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f' is not a valid format string \\(unrecognized character 'f'\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\+' is not a valid format string \\(two marker symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-' is not a valid format string \\(two linestyle symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk' is not a valid format string \\(two color symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r' is not a valid format string \\(two linestyle symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format
PASSED lib/matplotlib/tests/test_axes.py::test_automatic_legend
PASSED lib/matplotlib/tests/test_axes.py::test_plot_errors
PASSED lib/matplotlib/tests/test_axes.py::test_clim
PASSED lib/matplotlib/tests/test_axes.py::test_bezier_autoscale
PASSED lib/matplotlib/tests/test_axes.py::test_small_autoscale
PASSED lib/matplotlib/tests/test_axes.py::test_get_xticklabel
PASSED lib/matplotlib/tests/test_axes.py::test_bar_leading_nan
PASSED lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png]
PASSED lib/matplotlib/tests/test_axes.py::test_extent_units[png]
SKIPPED [54] ../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed
SKIPPED [7] lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[svg] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[svg] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_rc[svg] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_hexbin_log[png] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]
FAILED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]
FAILED lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_psd_csd[png] - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_default[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png] - ...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_textprops - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_set_ticks_kwargs_raise_error_without_labels
FAILED lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels - A...
FAILED lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_tick_label_update - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_shared_axes_retick - Attribute...
============ 37 failed, 737 passed, 61 skipped in 238.18s (0:03:58) ============
+ : '>>>>> End Test Output'
+ git checkout 332937997d03e0c173be6d9fc1841e9186e857df lib/matplotlib/tests/test_axes.py
Updated 1 path from a2ca791881
