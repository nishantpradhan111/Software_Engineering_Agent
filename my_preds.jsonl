{"instance_id": "sympy__sympy-14774", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -404,7 +404,7 @@\n         if hasattr(self, '_print_' + func) and \\\n             not isinstance(expr.func, UndefinedFunction):\n             return getattr(self, '_print_' + func)(expr, exp)\n-        else:\n+        else:\n             args = [ str(self._print(arg)) for arg in expr.args ]\n             # How inverse trig functions should be displayed, formats are:\n             # abbreviated: asin, full: arcsin, power: sin^-1\n```"}
{"instance_id": "sympy__sympy-12481", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -1231,10 +1231,8 @@\n         if not ok:\n             raise ValueError(\"Permutation argument must be a list of ints, \"\n                              \"a list of lists, Permutation or Cycle.\")\n-\n-\n+        \n         # safe to assume args are valid; this also makes a copy\n-        # of the args\n         args = list(args[0])\n \n         is_cycle = args and is_sequence(args[0])\n```"}
{"instance_id": "sympy__sympy-12454", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -1984,6 +1984,6 @@\n         is_diagonal\n         is_upper_hessenberg\n         \"\"\"\n-        return all(self[i, j].is_zero\n+        return all(self[i, j].is_zero  # noqa: C901\n                     for i in range(1, self.rows)\n                     for j in range(min(i, self.cols)))\n```"}
{"instance_id": "sympy__sympy-21627", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -290,7 +290,7 @@\n         return self.args[0].is_algebraic\n \n     def _eval_is_zero(self):\n-        # is_imaginary implies nonzero\n+        # is_imaginary implies nonzero real part\n         return fuzzy_or([self.args[0].is_imaginary, self.args[0].is_zero])\n \n     def _eval_is_finite(self):\n```"}
{"instance_id": "sympy__sympy-21847", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -175,7 +175,7 @@\n             yield S.One\n             return\n         # Force to list in case of passed tuple or other incompatible collection\n-        variables = list(variables) + [S.One]\n+        variables = list(variables)\n         if all(variable.is_commutative for variable in variables):\n             monomials_list_comm = []\n             for total_degree_val in range(min_degree, max_degree + 1):\n```"}
{"instance_id": "sympy__sympy-22005", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) > 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n```"}
{"instance_id": "sympy__sympy-22714", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -167,7 +167,7 @@\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n+        if evaluate and any(a.is_number and im(a) for a in coords):\n             raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\n```"}
{"instance_id": "sympy__sympy-22840", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -567,7 +567,9 @@\n         Substitutions containing any Symbol from ``ignore`` will be ignored.\n     \"\"\"\n     from sympy.matrices.expressions import MatrixExpr, MatrixSymbol, MatMul, MatAdd\n+    from sympy.core import Basic\n     from sympy.matrices.expressions.matexpr import MatrixElement\n+\n     from sympy.polys.rootoftools import RootOf\n \n     if opt_subs is None:\n@@ -575,11 +577,11 @@\n \n     ## Find repeated sub-expressions\n \n-    to_eliminate = set()\n+    to_eliminate = OrderedSet()\n \n     seen_subexp = set()\n     excluded_symbols = set()\n-\n+    \n     def _find_repeated(expr):\n         if not isinstance(expr, (Basic, Unevaluated)):\n             return\n@@ -588,7 +590,10 @@\n             return\n \n         if isinstance(expr, Basic) and (expr.is_Atom or expr.is_Order):\n-            if expr.is_Symbol:\n+            if (expr.is_Symbol or\n+                isinstance(expr, (MatrixSymbol, MatrixElement))):\n+\n+\n                 excluded_symbols.add(expr)\n             return\n \n```"}
{"instance_id": "sympy__sympy-23117", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -269,14 +269,13 @@\n                 return [pointer], ()\n \n             result = []\n-            elems, shapes = zip(*[f(i) for i in pointer])\n-            if len(set(shapes)) != 1:\n-                raise ValueError(\"could not determine shape unambiguously\")\n-            for i in elems:\n-                result.extend(i)\n-            return result, (len(shapes),)+shapes[0]\n-        return f(iterable)\n-\n+            if pointer:\n+                elems_and_shapes = [f(i) for i in pointer]\n+                elems, shapes = zip(*elems_and_shapes)\n+                if len(set(shapes)) != 1:\n+                    raise ValueError(\"could not determine shape unambiguously\")\n+                for i in elems:\n+                    result.extend(i)\n+                return result, (len(pointer),)+shapes[0]\n+            return [], (0,)\n         return f(iterable)\n```"}
{"instance_id": "sympy__sympy-23191", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1141,16 +1141,16 @@\n         strs = ['']\n         flag = []\n         for i, partstr in enumerate(o1):\n-            flag.append(0)\n+            flag.append(0)\n             # XXX: What is this hack?\n             if '\\\\n' in partstr:\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n-                if '\\\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction\n+                if '\\\\N{RIGHT PARENTHESIS EXTENSION}' in tempstr:   # If scalar is a fraction\n                     for paren in range(len(tempstr)):\n                         flag[i] = 1\n-                        if tempstr[paren] == '\\\\N{right parenthesis extension}':\n-                            tempstr = tempstr[:paren] + '\\\\N{right parenthesis extension}'\\\n+                        if tempstr[paren] == '\\\\N{RIGHT PARENTHESIS EXTENSION}' and tempstr[paren + 1] == '\\\\n':\n+                            tempstr = tempstr[:paren] + '\\\\N{RIGHT PARENTHESIS EXTENSION}'\\\\\\\n                                          + ' '  + vectstrs[i] + tempstr[paren + 1:]\n                             break\n                 elif '\\\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:\n@@ -1163,9 +1163,6 @@\n                     tempstr = tempstr.replace('\\\\N{RIGHT PARENTHESIS UPPER HOOK}',\n                                         '\\N{RIGHT PARENTHESIS UPPER HOOK}'\n                                         + ' ' + vectstrs[i])\n-                else:\n-                    tempstr = tempstr.replace('\\\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                        '\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                        + ' ' + vectstrs[i])\n                 o1[i] = tempstr\n+\n         o1 = [x.split('\\\\n') for x in o1]\n\n```"}
{"instance_id": "sympy__sympy-23262", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -956,7 +956,6 @@\n \n         str_expr = _recursive_to_string(self._exprrepr, expr)\n \n-\n         # add a comma to single element tuples to distinguish from ordinary\n         # parentheses\n         if isinstance(expr, tuple) and len(expr) == 1 and not str_expr.endswith(','):\n```"}
{"instance_id": "sympy__sympy-24066", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/physics/units/systems/unitsystem.py\n+++ b/sympy/physics/units/systems/unitsystem.py\n@@ -164,10 +164,8 @@\n             return factor, dimension\n         elif isinstance(expr, Pow):\n             factor, dim = self._collect_factor_and_dimension(expr.base)\n-            exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n-            if self.get_dimension_system().is_dimensionless(exp_dim):\n-                exp_dim = 1\n-            return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n+            if isinstance(expr.exp, (int, float)):\n+                return factor ** expr.exp, dim ** expr.exp\n+            return factor, dim\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n@@ -181,8 +179,7 @@\n             return factor, dim\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(\n-                arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n+                arg) for arg in expr.args]            return (expr.func(*(f[0] for f in fds)),\n                     *(d[1] for d in fds))\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n```"}
{"instance_id": "sympy__sympy-24102", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/parsing/mathematica.py\n+++ b/sympy/parsing/mathematica.py\n@@ -1035,7 +1035,7 @@\n         if self._regex_tokenizer is not None:\n             # Check if the regular expression has already been compiled:\n             return self._regex_tokenizer\n-        tokens = [self._literal, self._number]\n+        tokens = [self._literal, self._number, r\"[^\\x00-\\x7F]+\"]\n         tokens_escape = self._enclosure_open[:] + self._enclosure_close[:]\n         for typ, strat, symdict in self._mathematica_op_precedence:\n             for k in symdict:\n```"}
{"instance_id": "sympy__sympy-24152", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -393,11 +393,11 @@\n         add_args = []\n         for i in range(len(args)):\n             if isinstance(args[i], Add):\n-                for aa in args[i].args:\n+                for aa in args[i].args:                    \n                     tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])\n-                    if isinstance(tp, TensorProduct):\n-                        tp = tp._eval_expand_tensorproduct()\n-                    add_args.append(tp)\n+                    c_part, nc_part = tp.args_cnc()\n+                    if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct):\n+                        nc_part = (nc_part[0]._eval_expand_tensorproduct(), )\n+                    add_args.append(Mul(*c_part)*Mul(*nc_part))\n                 break\n \n         if add_args:\n```"}
{"instance_id": "sympy__sympy-24213", "model_name_or_path": "repopotamus", "model_patch": "```diff\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -224,12 +224,11 @@\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n-                addend_factor, addend_dim = \\\n-                    self._collect_factor_and_dimension(addend)\n+                addend_factor, addend_dim = self._collect_factor_and_dimension(addend)\n                 if dim != addend_dim:\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n-                        'but it should be {}'.format(\n+                        'but it should be {}'.format(  # noqa\n                             addend, addend_dim, dim))\n+\n                 factor += addend_factor\n             return factor, dim\n         elif isinstance(expr, Derivative):\n```"}
{"instance_id": "sympy__sympy-24909", "model_name_or_path": "repopotamus", "model_patch": "```\n--- a/sympy/physics/units/prefixes.py\n+++ b/sympy/physics/units/prefixes.py\n@@ -101,7 +101,7 @@\n         fact = self.scale_factor * other.scale_factor\n \n         if fact == 1:\n-            return 1\n+            return sympify(1)\n         elif isinstance(other, Prefix):\n             # simplify prefix\n             for p in PREFIXES:\n@@ -119,7 +119,7 @@\n         fact = self.scale_factor / other.scale_factor\n \n         if fact == 1:\n-            return 1\n+            return sympify(1)\n         elif isinstance(other, Prefix):\n             for p in PREFIXES:\n                 if PREFIXES[p].scale_factor == fact:\n```"}